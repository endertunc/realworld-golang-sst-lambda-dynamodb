//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	TokenScopes = "Token.Scopes"
)

// Article defines model for Article.
type Article struct {
	Author         Profile   `json:"author"`
	Body           string    `json:"body"`
	CreatedAt      time.Time `json:"createdAt"`
	Description    string    `json:"description"`
	Favorited      bool      `json:"favorited"`
	FavoritesCount int       `json:"favoritesCount"`
	Slug           string    `json:"slug"`
	TagList        []string  `json:"tagList"`
	Title          string    `json:"title"`
	UpdatedAt      time.Time `json:"updatedAt"`
}

// Comment defines model for Comment.
type Comment struct {
	Author    Profile   `json:"author"`
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"createdAt"`
	Id        int       `json:"id"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// GenericErrorModel defines model for GenericErrorModel.
type GenericErrorModel struct {
	Errors struct {
		Body []string `json:"body"`
	} `json:"errors"`
}

// LoginUser defines model for LoginUser.
type LoginUser struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// NewArticle defines model for NewArticle.
type NewArticle struct {
	Body        string    `json:"body"`
	Description string    `json:"description"`
	TagList     *[]string `json:"tagList,omitempty"`
	Title       string    `json:"title"`
}

// NewComment defines model for NewComment.
type NewComment struct {
	Body string `json:"body"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// Profile defines model for Profile.
type Profile struct {
	Bio       *string `json:"bio"`
	Following bool    `json:"following"`
	Image     *string `json:"image"`
	Username  string  `json:"username"`
}

// UpdateArticle defines model for UpdateArticle.
type UpdateArticle struct {
	Body        *string `json:"body,omitempty"`
	Description *string `json:"description,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// UpdateUser defines model for UpdateUser.
type UpdateUser struct {
	Bio      *string `json:"bio"`
	Email    *string `json:"email"`
	Image    *string `json:"image"`
	Password *string `json:"password"`
	Username *string `json:"username"`
}

// User defines model for User.
type User struct {
	Bio      *string `json:"bio"`
	Email    string  `json:"email"`
	Image    *string `json:"image"`
	Token    string  `json:"token"`
	Username string  `json:"username"`
}

// LimitParam defines model for limitParam.
type LimitParam = int

// OffsetParam defines model for offsetParam.
type OffsetParam = int

// GenericError defines model for GenericError.
type GenericError = GenericErrorModel

// MultipleArticlesResponse defines model for MultipleArticlesResponse.
type MultipleArticlesResponse struct {
	Articles      []Article `json:"articles"`
	ArticlesCount int       `json:"articlesCount"`
}

// MultipleCommentsResponse defines model for MultipleCommentsResponse.
type MultipleCommentsResponse struct {
	Comments []Comment `json:"comments"`
}

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	Profile Profile `json:"profile"`
}

// SingleArticleResponse defines model for SingleArticleResponse.
type SingleArticleResponse struct {
	Article Article `json:"article"`
}

// SingleCommentResponse defines model for SingleCommentResponse.
type SingleCommentResponse struct {
	Comment Comment `json:"comment"`
}

// TagsResponse defines model for TagsResponse.
type TagsResponse struct {
	Tags []string `json:"tags"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	User User `json:"user"`
}

// LoginUserRequest defines model for LoginUserRequest.
type LoginUserRequest struct {
	User LoginUser `json:"user"`
}

// NewArticleRequest defines model for NewArticleRequest.
type NewArticleRequest struct {
	Article NewArticle `json:"article"`
}

// NewCommentRequest defines model for NewCommentRequest.
type NewCommentRequest struct {
	Comment NewComment `json:"comment"`
}

// NewUserRequest defines model for NewUserRequest.
type NewUserRequest struct {
	User NewUser `json:"user"`
}

// UpdateArticleRequest defines model for UpdateArticleRequest.
type UpdateArticleRequest struct {
	Article UpdateArticle `json:"article"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	User UpdateUser `json:"user"`
}

// GetArticlesParams defines parameters for GetArticles.
type GetArticlesParams struct {
	// Tag Filter by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Author Filter by author (username)
	Author *string `form:"author,omitempty" json:"author,omitempty"`

	// Favorited Filter by favorites of a user (username)
	Favorited *string `form:"favorited,omitempty" json:"favorited,omitempty"`

	// Offset The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateArticleJSONBody defines parameters for CreateArticle.
type CreateArticleJSONBody struct {
	Article NewArticle `json:"article"`
}

// GetArticlesFeedParams defines parameters for GetArticlesFeed.
type GetArticlesFeedParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// UpdateArticleJSONBody defines parameters for UpdateArticle.
type UpdateArticleJSONBody struct {
	Article UpdateArticle `json:"article"`
}

// CreateArticleCommentJSONBody defines parameters for CreateArticleComment.
type CreateArticleCommentJSONBody struct {
	Comment NewComment `json:"comment"`
}

// UpdateCurrentUserJSONBody defines parameters for UpdateCurrentUser.
type UpdateCurrentUserJSONBody struct {
	User UpdateUser `json:"user"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	User NewUser `json:"user"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	User LoginUser `json:"user"`
}

// CreateArticleJSONRequestBody defines body for CreateArticle for application/json ContentType.
type CreateArticleJSONRequestBody CreateArticleJSONBody

// UpdateArticleJSONRequestBody defines body for UpdateArticle for application/json ContentType.
type UpdateArticleJSONRequestBody UpdateArticleJSONBody

// CreateArticleCommentJSONRequestBody defines body for CreateArticleComment for application/json ContentType.
type CreateArticleCommentJSONRequestBody CreateArticleCommentJSONBody

// UpdateCurrentUserJSONRequestBody defines body for UpdateCurrentUser for application/json ContentType.
type UpdateCurrentUserJSONRequestBody UpdateCurrentUserJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get recent articles globally
	// (GET /articles)
	GetArticles(w http.ResponseWriter, r *http.Request, params GetArticlesParams)
	// Create an article
	// (POST /articles)
	CreateArticle(w http.ResponseWriter, r *http.Request)
	// Get recent articles from users you follow
	// (GET /articles/feed)
	GetArticlesFeed(w http.ResponseWriter, r *http.Request, params GetArticlesFeedParams)
	// Delete an article
	// (DELETE /articles/{slug})
	DeleteArticle(w http.ResponseWriter, r *http.Request, slug string)
	// Get an article
	// (GET /articles/{slug})
	GetArticle(w http.ResponseWriter, r *http.Request, slug string)
	// Update an article
	// (PUT /articles/{slug})
	UpdateArticle(w http.ResponseWriter, r *http.Request, slug string)
	// Get comments for an article
	// (GET /articles/{slug}/comments)
	GetArticleComments(w http.ResponseWriter, r *http.Request, slug string)
	// Create a comment for an article
	// (POST /articles/{slug}/comments)
	CreateArticleComment(w http.ResponseWriter, r *http.Request, slug string)
	// Delete a comment for an article
	// (DELETE /articles/{slug}/comments/{id})
	DeleteArticleComment(w http.ResponseWriter, r *http.Request, slug string, id int)
	// Unfavorite an article
	// (DELETE /articles/{slug}/favorite)
	DeleteArticleFavorite(w http.ResponseWriter, r *http.Request, slug string)
	// Favorite an article
	// (POST /articles/{slug}/favorite)
	CreateArticleFavorite(w http.ResponseWriter, r *http.Request, slug string)
	// Get a profile
	// (GET /profiles/{username})
	GetProfileByUsername(w http.ResponseWriter, r *http.Request, username string)
	// Unfollow a user
	// (DELETE /profiles/{username}/follow)
	UnfollowUserByUsername(w http.ResponseWriter, r *http.Request, username string)
	// Follow a user
	// (POST /profiles/{username}/follow)
	FollowUserByUsername(w http.ResponseWriter, r *http.Request, username string)
	// Get tags
	// (GET /tags)
	GetTags(w http.ResponseWriter, r *http.Request)
	// Get current user
	// (GET /user)
	GetCurrentUser(w http.ResponseWriter, r *http.Request)
	// Update current user
	// (PUT /user)
	UpdateCurrentUser(w http.ResponseWriter, r *http.Request)

	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Existing user login
	// (POST /users/login)
	Login(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetArticles operation middleware
func (siw *ServerInterfaceWrapper) GetArticles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesParams

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", r.URL.Query(), &params.Author)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author", Err: err})
		return
	}

	// ------------- Optional query parameter "favorited" -------------

	err = runtime.BindQueryParameter("form", true, false, "favorited", r.URL.Query(), &params.Favorited)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "favorited", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticles(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateArticle operation middleware
func (siw *ServerInterfaceWrapper) CreateArticle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateArticle(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetArticlesFeed operation middleware
func (siw *ServerInterfaceWrapper) GetArticlesFeed(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesFeedParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticlesFeed(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteArticle operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", r.PathValue("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteArticle(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetArticle operation middleware
func (siw *ServerInterfaceWrapper) GetArticle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", r.PathValue("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticle(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateArticle operation middleware
func (siw *ServerInterfaceWrapper) UpdateArticle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", r.PathValue("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateArticle(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetArticleComments operation middleware
func (siw *ServerInterfaceWrapper) GetArticleComments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", r.PathValue("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticleComments(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateArticleComment operation middleware
func (siw *ServerInterfaceWrapper) CreateArticleComment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", r.PathValue("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateArticleComment(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteArticleComment operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticleComment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", r.PathValue("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteArticleComment(w, r, slug, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteArticleFavorite operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticleFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", r.PathValue("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteArticleFavorite(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateArticleFavorite operation middleware
func (siw *ServerInterfaceWrapper) CreateArticleFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", r.PathValue("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateArticleFavorite(w, r, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProfileByUsername operation middleware
func (siw *ServerInterfaceWrapper) GetProfileByUsername(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", r.PathValue("username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProfileByUsername(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UnfollowUserByUsername operation middleware
func (siw *ServerInterfaceWrapper) UnfollowUserByUsername(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", r.PathValue("username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnfollowUserByUsername(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FollowUserByUsername operation middleware
func (siw *ServerInterfaceWrapper) FollowUserByUsername(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", r.PathValue("username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FollowUserByUsername(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTags(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrentUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateCurrentUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCurrentUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/articles", wrapper.GetArticles)
	m.HandleFunc("POST "+options.BaseURL+"/articles", wrapper.CreateArticle)
	m.HandleFunc("GET "+options.BaseURL+"/articles/feed", wrapper.GetArticlesFeed)
	m.HandleFunc("DELETE "+options.BaseURL+"/articles/{slug}", wrapper.DeleteArticle)
	m.HandleFunc("GET "+options.BaseURL+"/articles/{slug}", wrapper.GetArticle)
	m.HandleFunc("PUT "+options.BaseURL+"/articles/{slug}", wrapper.UpdateArticle)
	m.HandleFunc("GET "+options.BaseURL+"/articles/{slug}/comments", wrapper.GetArticleComments)
	m.HandleFunc("POST "+options.BaseURL+"/articles/{slug}/comments", wrapper.CreateArticleComment)
	m.HandleFunc("DELETE "+options.BaseURL+"/articles/{slug}/comments/{id}", wrapper.DeleteArticleComment)
	m.HandleFunc("DELETE "+options.BaseURL+"/articles/{slug}/favorite", wrapper.DeleteArticleFavorite)
	m.HandleFunc("POST "+options.BaseURL+"/articles/{slug}/favorite", wrapper.CreateArticleFavorite)
	m.HandleFunc("GET "+options.BaseURL+"/profiles/{username}", wrapper.GetProfileByUsername)
	m.HandleFunc("DELETE "+options.BaseURL+"/profiles/{username}/follow", wrapper.UnfollowUserByUsername)
	m.HandleFunc("POST "+options.BaseURL+"/profiles/{username}/follow", wrapper.FollowUserByUsername)
	m.HandleFunc("GET "+options.BaseURL+"/tags", wrapper.GetTags)
	m.HandleFunc("GET "+options.BaseURL+"/user", wrapper.GetCurrentUser)
	m.HandleFunc("PUT "+options.BaseURL+"/user", wrapper.UpdateCurrentUser)
	m.HandleFunc("POST "+options.BaseURL+"/users", wrapper.CreateUser)
	m.HandleFunc("POST "+options.BaseURL+"/users/login", wrapper.Login)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"j4iq30NSbj9u/xcAAP//5TqyFitBAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
