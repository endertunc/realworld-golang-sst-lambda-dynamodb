// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "realworld-aws-lambda-dynamodb-golang/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockArticleOpensearchRepositoryInterface is an autogenerated mock type for the ArticleOpensearchRepositoryInterface type
type MockArticleOpensearchRepositoryInterface struct {
	mock.Mock
}

type MockArticleOpensearchRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArticleOpensearchRepositoryInterface) EXPECT() *MockArticleOpensearchRepositoryInterface_Expecter {
	return &MockArticleOpensearchRepositoryInterface_Expecter{mock: &_m.Mock}
}

// FindAllArticles provides a mock function with given fields: ctx, limit, offset
func (_m *MockArticleOpensearchRepositoryInterface) FindAllArticles(ctx context.Context, limit int, offset *int) ([]domain.Article, *int, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindAllArticles")
	}

	var r0 []domain.Article
	var r1 *int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *int) ([]domain.Article, *int, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *int) []domain.Article); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *int) *int); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*int)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, *int) error); ok {
		r2 = rf(ctx, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockArticleOpensearchRepositoryInterface_FindAllArticles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllArticles'
type MockArticleOpensearchRepositoryInterface_FindAllArticles_Call struct {
	*mock.Call
}

// FindAllArticles is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset *int
func (_e *MockArticleOpensearchRepositoryInterface_Expecter) FindAllArticles(ctx interface{}, limit interface{}, offset interface{}) *MockArticleOpensearchRepositoryInterface_FindAllArticles_Call {
	return &MockArticleOpensearchRepositoryInterface_FindAllArticles_Call{Call: _e.mock.On("FindAllArticles", ctx, limit, offset)}
}

func (_c *MockArticleOpensearchRepositoryInterface_FindAllArticles_Call) Run(run func(ctx context.Context, limit int, offset *int)) *MockArticleOpensearchRepositoryInterface_FindAllArticles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*int))
	})
	return _c
}

func (_c *MockArticleOpensearchRepositoryInterface_FindAllArticles_Call) Return(_a0 []domain.Article, _a1 *int, _a2 error) *MockArticleOpensearchRepositoryInterface_FindAllArticles_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockArticleOpensearchRepositoryInterface_FindAllArticles_Call) RunAndReturn(run func(context.Context, int, *int) ([]domain.Article, *int, error)) *MockArticleOpensearchRepositoryInterface_FindAllArticles_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllTags provides a mock function with given fields: ctx
func (_m *MockArticleOpensearchRepositoryInterface) FindAllTags(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllTags")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleOpensearchRepositoryInterface_FindAllTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllTags'
type MockArticleOpensearchRepositoryInterface_FindAllTags_Call struct {
	*mock.Call
}

// FindAllTags is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockArticleOpensearchRepositoryInterface_Expecter) FindAllTags(ctx interface{}) *MockArticleOpensearchRepositoryInterface_FindAllTags_Call {
	return &MockArticleOpensearchRepositoryInterface_FindAllTags_Call{Call: _e.mock.On("FindAllTags", ctx)}
}

func (_c *MockArticleOpensearchRepositoryInterface_FindAllTags_Call) Run(run func(ctx context.Context)) *MockArticleOpensearchRepositoryInterface_FindAllTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockArticleOpensearchRepositoryInterface_FindAllTags_Call) Return(_a0 []string, _a1 error) *MockArticleOpensearchRepositoryInterface_FindAllTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleOpensearchRepositoryInterface_FindAllTags_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockArticleOpensearchRepositoryInterface_FindAllTags_Call {
	_c.Call.Return(run)
	return _c
}

// FindArticlesByTag provides a mock function with given fields: ctx, tag, limit, offset
func (_m *MockArticleOpensearchRepositoryInterface) FindArticlesByTag(ctx context.Context, tag string, limit int, offset *int) ([]domain.Article, *int, error) {
	ret := _m.Called(ctx, tag, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindArticlesByTag")
	}

	var r0 []domain.Article
	var r1 *int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, *int) ([]domain.Article, *int, error)); ok {
		return rf(ctx, tag, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, *int) []domain.Article); ok {
		r0 = rf(ctx, tag, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, *int) *int); ok {
		r1 = rf(ctx, tag, limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*int)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, *int) error); ok {
		r2 = rf(ctx, tag, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockArticleOpensearchRepositoryInterface_FindArticlesByTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindArticlesByTag'
type MockArticleOpensearchRepositoryInterface_FindArticlesByTag_Call struct {
	*mock.Call
}

// FindArticlesByTag is a helper method to define mock.On call
//   - ctx context.Context
//   - tag string
//   - limit int
//   - offset *int
func (_e *MockArticleOpensearchRepositoryInterface_Expecter) FindArticlesByTag(ctx interface{}, tag interface{}, limit interface{}, offset interface{}) *MockArticleOpensearchRepositoryInterface_FindArticlesByTag_Call {
	return &MockArticleOpensearchRepositoryInterface_FindArticlesByTag_Call{Call: _e.mock.On("FindArticlesByTag", ctx, tag, limit, offset)}
}

func (_c *MockArticleOpensearchRepositoryInterface_FindArticlesByTag_Call) Run(run func(ctx context.Context, tag string, limit int, offset *int)) *MockArticleOpensearchRepositoryInterface_FindArticlesByTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(*int))
	})
	return _c
}

func (_c *MockArticleOpensearchRepositoryInterface_FindArticlesByTag_Call) Return(_a0 []domain.Article, _a1 *int, _a2 error) *MockArticleOpensearchRepositoryInterface_FindArticlesByTag_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockArticleOpensearchRepositoryInterface_FindArticlesByTag_Call) RunAndReturn(run func(context.Context, string, int, *int) ([]domain.Article, *int, error)) *MockArticleOpensearchRepositoryInterface_FindArticlesByTag_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockArticleOpensearchRepositoryInterface creates a new instance of MockArticleOpensearchRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArticleOpensearchRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArticleOpensearchRepositoryInterface {
	mock := &MockArticleOpensearchRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
