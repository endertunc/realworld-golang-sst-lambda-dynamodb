// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "realworld-aws-lambda-dynamodb-golang/internal/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockUserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type MockUserRepositoryInterface struct {
	mock.Mock
}

type MockUserRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterface_Expecter {
	return &MockUserRepositoryInterface_Expecter{mock: &_m.Mock}
}

// FindUserByEmail provides a mock function with given fields: c, email
func (_m *MockUserRepositoryInterface) FindUserByEmail(c context.Context, email string) (domain.User, error) {
	ret := _m.Called(c, email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(c, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(c, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryInterface_FindUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByEmail'
type MockUserRepositoryInterface_FindUserByEmail_Call struct {
	*mock.Call
}

// FindUserByEmail is a helper method to define mock.On call
//   - c context.Context
//   - email string
func (_e *MockUserRepositoryInterface_Expecter) FindUserByEmail(c interface{}, email interface{}) *MockUserRepositoryInterface_FindUserByEmail_Call {
	return &MockUserRepositoryInterface_FindUserByEmail_Call{Call: _e.mock.On("FindUserByEmail", c, email)}
}

func (_c *MockUserRepositoryInterface_FindUserByEmail_Call) Run(run func(c context.Context, email string)) *MockUserRepositoryInterface_FindUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepositoryInterface_FindUserByEmail_Call) Return(_a0 domain.User, _a1 error) *MockUserRepositoryInterface_FindUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryInterface_FindUserByEmail_Call) RunAndReturn(run func(context.Context, string) (domain.User, error)) *MockUserRepositoryInterface_FindUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserById provides a mock function with given fields: c, userId
func (_m *MockUserRepositoryInterface) FindUserById(c context.Context, userId uuid.UUID) (domain.User, error) {
	ret := _m.Called(c, userId)

	if len(ret) == 0 {
		panic("no return value specified for FindUserById")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (domain.User, error)); ok {
		return rf(c, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.User); ok {
		r0 = rf(c, userId)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(c, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryInterface_FindUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserById'
type MockUserRepositoryInterface_FindUserById_Call struct {
	*mock.Call
}

// FindUserById is a helper method to define mock.On call
//   - c context.Context
//   - userId uuid.UUID
func (_e *MockUserRepositoryInterface_Expecter) FindUserById(c interface{}, userId interface{}) *MockUserRepositoryInterface_FindUserById_Call {
	return &MockUserRepositoryInterface_FindUserById_Call{Call: _e.mock.On("FindUserById", c, userId)}
}

func (_c *MockUserRepositoryInterface_FindUserById_Call) Run(run func(c context.Context, userId uuid.UUID)) *MockUserRepositoryInterface_FindUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserRepositoryInterface_FindUserById_Call) Return(_a0 domain.User, _a1 error) *MockUserRepositoryInterface_FindUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryInterface_FindUserById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (domain.User, error)) *MockUserRepositoryInterface_FindUserById_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByUsername provides a mock function with given fields: c, username
func (_m *MockUserRepositoryInterface) FindUserByUsername(c context.Context, username string) (domain.User, error) {
	ret := _m.Called(c, username)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByUsername")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(c, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(c, username)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryInterface_FindUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByUsername'
type MockUserRepositoryInterface_FindUserByUsername_Call struct {
	*mock.Call
}

// FindUserByUsername is a helper method to define mock.On call
//   - c context.Context
//   - username string
func (_e *MockUserRepositoryInterface_Expecter) FindUserByUsername(c interface{}, username interface{}) *MockUserRepositoryInterface_FindUserByUsername_Call {
	return &MockUserRepositoryInterface_FindUserByUsername_Call{Call: _e.mock.On("FindUserByUsername", c, username)}
}

func (_c *MockUserRepositoryInterface_FindUserByUsername_Call) Run(run func(c context.Context, username string)) *MockUserRepositoryInterface_FindUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepositoryInterface_FindUserByUsername_Call) Return(_a0 domain.User, _a1 error) *MockUserRepositoryInterface_FindUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryInterface_FindUserByUsername_Call) RunAndReturn(run func(context.Context, string) (domain.User, error)) *MockUserRepositoryInterface_FindUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// FindUsersByIds provides a mock function with given fields: c, userIds
func (_m *MockUserRepositoryInterface) FindUsersByIds(c context.Context, userIds []uuid.UUID) ([]domain.User, error) {
	ret := _m.Called(c, userIds)

	if len(ret) == 0 {
		panic("no return value specified for FindUsersByIds")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]domain.User, error)); ok {
		return rf(c, userIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []domain.User); ok {
		r0 = rf(c, userIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(c, userIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryInterface_FindUsersByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUsersByIds'
type MockUserRepositoryInterface_FindUsersByIds_Call struct {
	*mock.Call
}

// FindUsersByIds is a helper method to define mock.On call
//   - c context.Context
//   - userIds []uuid.UUID
func (_e *MockUserRepositoryInterface_Expecter) FindUsersByIds(c interface{}, userIds interface{}) *MockUserRepositoryInterface_FindUsersByIds_Call {
	return &MockUserRepositoryInterface_FindUsersByIds_Call{Call: _e.mock.On("FindUsersByIds", c, userIds)}
}

func (_c *MockUserRepositoryInterface_FindUsersByIds_Call) Run(run func(c context.Context, userIds []uuid.UUID)) *MockUserRepositoryInterface_FindUsersByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockUserRepositoryInterface_FindUsersByIds_Call) Return(_a0 []domain.User, _a1 error) *MockUserRepositoryInterface_FindUsersByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryInterface_FindUsersByIds_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]domain.User, error)) *MockUserRepositoryInterface_FindUsersByIds_Call {
	_c.Call.Return(run)
	return _c
}

// InsertNewUser provides a mock function with given fields: c, newUser
func (_m *MockUserRepositoryInterface) InsertNewUser(c context.Context, newUser domain.User) (domain.User, error) {
	ret := _m.Called(c, newUser)

	if len(ret) == 0 {
		panic("no return value specified for InsertNewUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) (domain.User, error)); ok {
		return rf(c, newUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) domain.User); ok {
		r0 = rf(c, newUser)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User) error); ok {
		r1 = rf(c, newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryInterface_InsertNewUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertNewUser'
type MockUserRepositoryInterface_InsertNewUser_Call struct {
	*mock.Call
}

// InsertNewUser is a helper method to define mock.On call
//   - c context.Context
//   - newUser domain.User
func (_e *MockUserRepositoryInterface_Expecter) InsertNewUser(c interface{}, newUser interface{}) *MockUserRepositoryInterface_InsertNewUser_Call {
	return &MockUserRepositoryInterface_InsertNewUser_Call{Call: _e.mock.On("InsertNewUser", c, newUser)}
}

func (_c *MockUserRepositoryInterface_InsertNewUser_Call) Run(run func(c context.Context, newUser domain.User)) *MockUserRepositoryInterface_InsertNewUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User))
	})
	return _c
}

func (_c *MockUserRepositoryInterface_InsertNewUser_Call) Return(_a0 domain.User, _a1 error) *MockUserRepositoryInterface_InsertNewUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryInterface_InsertNewUser_Call) RunAndReturn(run func(context.Context, domain.User) (domain.User, error)) *MockUserRepositoryInterface_InsertNewUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: c, user, oldEmail, oldUsername
func (_m *MockUserRepositoryInterface) UpdateUser(c context.Context, user domain.User, oldEmail string, oldUsername string) (domain.User, error) {
	ret := _m.Called(c, user, oldEmail, oldUsername)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User, string, string) (domain.User, error)); ok {
		return rf(c, user, oldEmail, oldUsername)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User, string, string) domain.User); ok {
		r0 = rf(c, user, oldEmail, oldUsername)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User, string, string) error); ok {
		r1 = rf(c, user, oldEmail, oldUsername)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryInterface_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserRepositoryInterface_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - c context.Context
//   - user domain.User
//   - oldEmail string
//   - oldUsername string
func (_e *MockUserRepositoryInterface_Expecter) UpdateUser(c interface{}, user interface{}, oldEmail interface{}, oldUsername interface{}) *MockUserRepositoryInterface_UpdateUser_Call {
	return &MockUserRepositoryInterface_UpdateUser_Call{Call: _e.mock.On("UpdateUser", c, user, oldEmail, oldUsername)}
}

func (_c *MockUserRepositoryInterface_UpdateUser_Call) Run(run func(c context.Context, user domain.User, oldEmail string, oldUsername string)) *MockUserRepositoryInterface_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUserRepositoryInterface_UpdateUser_Call) Return(_a0 domain.User, _a1 error) *MockUserRepositoryInterface_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryInterface_UpdateUser_Call) RunAndReturn(run func(context.Context, domain.User, string, string) (domain.User, error)) *MockUserRepositoryInterface_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepositoryInterface creates a new instance of MockUserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
