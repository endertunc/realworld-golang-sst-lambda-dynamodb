// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// MockUserFeedRepositoryInterface is an autogenerated mock type for the UserFeedRepositoryInterface type
type MockUserFeedRepositoryInterface struct {
	mock.Mock
}

type MockUserFeedRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserFeedRepositoryInterface) EXPECT() *MockUserFeedRepositoryInterface_Expecter {
	return &MockUserFeedRepositoryInterface_Expecter{mock: &_m.Mock}
}

// FanoutArticle provides a mock function with given fields: ctx, articleId, authorId, createdAt
func (_m *MockUserFeedRepositoryInterface) FanoutArticle(ctx context.Context, articleId uuid.UUID, authorId uuid.UUID, createdAt time.Time) error {
	ret := _m.Called(ctx, articleId, authorId, createdAt)

	if len(ret) == 0 {
		panic("no return value specified for FanoutArticle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, time.Time) error); ok {
		r0 = rf(ctx, articleId, authorId, createdAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserFeedRepositoryInterface_FanoutArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FanoutArticle'
type MockUserFeedRepositoryInterface_FanoutArticle_Call struct {
	*mock.Call
}

// FanoutArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - articleId uuid.UUID
//   - authorId uuid.UUID
//   - createdAt time.Time
func (_e *MockUserFeedRepositoryInterface_Expecter) FanoutArticle(ctx interface{}, articleId interface{}, authorId interface{}, createdAt interface{}) *MockUserFeedRepositoryInterface_FanoutArticle_Call {
	return &MockUserFeedRepositoryInterface_FanoutArticle_Call{Call: _e.mock.On("FanoutArticle", ctx, articleId, authorId, createdAt)}
}

func (_c *MockUserFeedRepositoryInterface_FanoutArticle_Call) Run(run func(ctx context.Context, articleId uuid.UUID, authorId uuid.UUID, createdAt time.Time)) *MockUserFeedRepositoryInterface_FanoutArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(time.Time))
	})
	return _c
}

func (_c *MockUserFeedRepositoryInterface_FanoutArticle_Call) Return(_a0 error) *MockUserFeedRepositoryInterface_FanoutArticle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserFeedRepositoryInterface_FanoutArticle_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, time.Time) error) *MockUserFeedRepositoryInterface_FanoutArticle_Call {
	_c.Call.Return(run)
	return _c
}

// FindArticleIdsInUserFeed provides a mock function with given fields: ctx, userId, limit, nextPageToken
func (_m *MockUserFeedRepositoryInterface) FindArticleIdsInUserFeed(ctx context.Context, userId uuid.UUID, limit int, nextPageToken *string) ([]uuid.UUID, *string, error) {
	ret := _m.Called(ctx, userId, limit, nextPageToken)

	if len(ret) == 0 {
		panic("no return value specified for FindArticleIdsInUserFeed")
	}

	var r0 []uuid.UUID
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, *string) ([]uuid.UUID, *string, error)); ok {
		return rf(ctx, userId, limit, nextPageToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, *string) []uuid.UUID); ok {
		r0 = rf(ctx, userId, limit, nextPageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, *string) *string); ok {
		r1 = rf(ctx, userId, limit, nextPageToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, int, *string) error); ok {
		r2 = rf(ctx, userId, limit, nextPageToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserFeedRepositoryInterface_FindArticleIdsInUserFeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindArticleIdsInUserFeed'
type MockUserFeedRepositoryInterface_FindArticleIdsInUserFeed_Call struct {
	*mock.Call
}

// FindArticleIdsInUserFeed is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
//   - limit int
//   - nextPageToken *string
func (_e *MockUserFeedRepositoryInterface_Expecter) FindArticleIdsInUserFeed(ctx interface{}, userId interface{}, limit interface{}, nextPageToken interface{}) *MockUserFeedRepositoryInterface_FindArticleIdsInUserFeed_Call {
	return &MockUserFeedRepositoryInterface_FindArticleIdsInUserFeed_Call{Call: _e.mock.On("FindArticleIdsInUserFeed", ctx, userId, limit, nextPageToken)}
}

func (_c *MockUserFeedRepositoryInterface_FindArticleIdsInUserFeed_Call) Run(run func(ctx context.Context, userId uuid.UUID, limit int, nextPageToken *string)) *MockUserFeedRepositoryInterface_FindArticleIdsInUserFeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int), args[3].(*string))
	})
	return _c
}

func (_c *MockUserFeedRepositoryInterface_FindArticleIdsInUserFeed_Call) Return(_a0 []uuid.UUID, _a1 *string, _a2 error) *MockUserFeedRepositoryInterface_FindArticleIdsInUserFeed_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserFeedRepositoryInterface_FindArticleIdsInUserFeed_Call) RunAndReturn(run func(context.Context, uuid.UUID, int, *string) ([]uuid.UUID, *string, error)) *MockUserFeedRepositoryInterface_FindArticleIdsInUserFeed_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserFeedRepositoryInterface creates a new instance of MockUserFeedRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserFeedRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserFeedRepositoryInterface {
	mock := &MockUserFeedRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
