// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "realworld-aws-lambda-dynamodb-golang/internal/domain"

	mapset "github.com/deckarep/golang-set/v2"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockArticleRepositoryInterface is an autogenerated mock type for the ArticleRepositoryInterface type
type MockArticleRepositoryInterface struct {
	mock.Mock
}

type MockArticleRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArticleRepositoryInterface) EXPECT() *MockArticleRepositoryInterface_Expecter {
	return &MockArticleRepositoryInterface_Expecter{mock: &_m.Mock}
}

// CreateArticle provides a mock function with given fields: ctx, article
func (_m *MockArticleRepositoryInterface) CreateArticle(ctx context.Context, article domain.Article) (domain.Article, error) {
	ret := _m.Called(ctx, article)

	if len(ret) == 0 {
		panic("no return value specified for CreateArticle")
	}

	var r0 domain.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Article) (domain.Article, error)); ok {
		return rf(ctx, article)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Article) domain.Article); ok {
		r0 = rf(ctx, article)
	} else {
		r0 = ret.Get(0).(domain.Article)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Article) error); ok {
		r1 = rf(ctx, article)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleRepositoryInterface_CreateArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateArticle'
type MockArticleRepositoryInterface_CreateArticle_Call struct {
	*mock.Call
}

// CreateArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - article domain.Article
func (_e *MockArticleRepositoryInterface_Expecter) CreateArticle(ctx interface{}, article interface{}) *MockArticleRepositoryInterface_CreateArticle_Call {
	return &MockArticleRepositoryInterface_CreateArticle_Call{Call: _e.mock.On("CreateArticle", ctx, article)}
}

func (_c *MockArticleRepositoryInterface_CreateArticle_Call) Run(run func(ctx context.Context, article domain.Article)) *MockArticleRepositoryInterface_CreateArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Article))
	})
	return _c
}

func (_c *MockArticleRepositoryInterface_CreateArticle_Call) Return(_a0 domain.Article, _a1 error) *MockArticleRepositoryInterface_CreateArticle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleRepositoryInterface_CreateArticle_Call) RunAndReturn(run func(context.Context, domain.Article) (domain.Article, error)) *MockArticleRepositoryInterface_CreateArticle_Call {
	_c.Call.Return(run)
	return _c
}

// CreateComment provides a mock function with given fields: ctx, comment
func (_m *MockArticleRepositoryInterface) CreateComment(ctx context.Context, comment domain.Comment) error {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Comment) error); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockArticleRepositoryInterface_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type MockArticleRepositoryInterface_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - ctx context.Context
//   - comment domain.Comment
func (_e *MockArticleRepositoryInterface_Expecter) CreateComment(ctx interface{}, comment interface{}) *MockArticleRepositoryInterface_CreateComment_Call {
	return &MockArticleRepositoryInterface_CreateComment_Call{Call: _e.mock.On("CreateComment", ctx, comment)}
}

func (_c *MockArticleRepositoryInterface_CreateComment_Call) Run(run func(ctx context.Context, comment domain.Comment)) *MockArticleRepositoryInterface_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Comment))
	})
	return _c
}

func (_c *MockArticleRepositoryInterface_CreateComment_Call) Return(_a0 error) *MockArticleRepositoryInterface_CreateComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArticleRepositoryInterface_CreateComment_Call) RunAndReturn(run func(context.Context, domain.Comment) error) *MockArticleRepositoryInterface_CreateComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteArticleById provides a mock function with given fields: ctx, articleId
func (_m *MockArticleRepositoryInterface) DeleteArticleById(ctx context.Context, articleId uuid.UUID) error {
	ret := _m.Called(ctx, articleId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteArticleById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, articleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockArticleRepositoryInterface_DeleteArticleById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteArticleById'
type MockArticleRepositoryInterface_DeleteArticleById_Call struct {
	*mock.Call
}

// DeleteArticleById is a helper method to define mock.On call
//   - ctx context.Context
//   - articleId uuid.UUID
func (_e *MockArticleRepositoryInterface_Expecter) DeleteArticleById(ctx interface{}, articleId interface{}) *MockArticleRepositoryInterface_DeleteArticleById_Call {
	return &MockArticleRepositoryInterface_DeleteArticleById_Call{Call: _e.mock.On("DeleteArticleById", ctx, articleId)}
}

func (_c *MockArticleRepositoryInterface_DeleteArticleById_Call) Run(run func(ctx context.Context, articleId uuid.UUID)) *MockArticleRepositoryInterface_DeleteArticleById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockArticleRepositoryInterface_DeleteArticleById_Call) Return(_a0 error) *MockArticleRepositoryInterface_DeleteArticleById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArticleRepositoryInterface_DeleteArticleById_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockArticleRepositoryInterface_DeleteArticleById_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCommentByArticleIdAndCommentId provides a mock function with given fields: ctx, loggedInUserId, articleId, commentId
func (_m *MockArticleRepositoryInterface) DeleteCommentByArticleIdAndCommentId(ctx context.Context, loggedInUserId uuid.UUID, articleId uuid.UUID, commentId uuid.UUID) error {
	ret := _m.Called(ctx, loggedInUserId, articleId, commentId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCommentByArticleIdAndCommentId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, loggedInUserId, articleId, commentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockArticleRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCommentByArticleIdAndCommentId'
type MockArticleRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call struct {
	*mock.Call
}

// DeleteCommentByArticleIdAndCommentId is a helper method to define mock.On call
//   - ctx context.Context
//   - loggedInUserId uuid.UUID
//   - articleId uuid.UUID
//   - commentId uuid.UUID
func (_e *MockArticleRepositoryInterface_Expecter) DeleteCommentByArticleIdAndCommentId(ctx interface{}, loggedInUserId interface{}, articleId interface{}, commentId interface{}) *MockArticleRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call {
	return &MockArticleRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call{Call: _e.mock.On("DeleteCommentByArticleIdAndCommentId", ctx, loggedInUserId, articleId, commentId)}
}

func (_c *MockArticleRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call) Run(run func(ctx context.Context, loggedInUserId uuid.UUID, articleId uuid.UUID, commentId uuid.UUID)) *MockArticleRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockArticleRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call) Return(_a0 error) *MockArticleRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArticleRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error) *MockArticleRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call {
	_c.Call.Return(run)
	return _c
}

// FavoriteArticle provides a mock function with given fields: ctx, loggedInUserId, articleId
func (_m *MockArticleRepositoryInterface) FavoriteArticle(ctx context.Context, loggedInUserId uuid.UUID, articleId uuid.UUID) error {
	ret := _m.Called(ctx, loggedInUserId, articleId)

	if len(ret) == 0 {
		panic("no return value specified for FavoriteArticle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, loggedInUserId, articleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockArticleRepositoryInterface_FavoriteArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FavoriteArticle'
type MockArticleRepositoryInterface_FavoriteArticle_Call struct {
	*mock.Call
}

// FavoriteArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - loggedInUserId uuid.UUID
//   - articleId uuid.UUID
func (_e *MockArticleRepositoryInterface_Expecter) FavoriteArticle(ctx interface{}, loggedInUserId interface{}, articleId interface{}) *MockArticleRepositoryInterface_FavoriteArticle_Call {
	return &MockArticleRepositoryInterface_FavoriteArticle_Call{Call: _e.mock.On("FavoriteArticle", ctx, loggedInUserId, articleId)}
}

func (_c *MockArticleRepositoryInterface_FavoriteArticle_Call) Run(run func(ctx context.Context, loggedInUserId uuid.UUID, articleId uuid.UUID)) *MockArticleRepositoryInterface_FavoriteArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockArticleRepositoryInterface_FavoriteArticle_Call) Return(_a0 error) *MockArticleRepositoryInterface_FavoriteArticle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArticleRepositoryInterface_FavoriteArticle_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockArticleRepositoryInterface_FavoriteArticle_Call {
	_c.Call.Return(run)
	return _c
}

// FindArticleById provides a mock function with given fields: ctx, articleId
func (_m *MockArticleRepositoryInterface) FindArticleById(ctx context.Context, articleId uuid.UUID) (domain.Article, error) {
	ret := _m.Called(ctx, articleId)

	if len(ret) == 0 {
		panic("no return value specified for FindArticleById")
	}

	var r0 domain.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (domain.Article, error)); ok {
		return rf(ctx, articleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.Article); ok {
		r0 = rf(ctx, articleId)
	} else {
		r0 = ret.Get(0).(domain.Article)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, articleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleRepositoryInterface_FindArticleById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindArticleById'
type MockArticleRepositoryInterface_FindArticleById_Call struct {
	*mock.Call
}

// FindArticleById is a helper method to define mock.On call
//   - ctx context.Context
//   - articleId uuid.UUID
func (_e *MockArticleRepositoryInterface_Expecter) FindArticleById(ctx interface{}, articleId interface{}) *MockArticleRepositoryInterface_FindArticleById_Call {
	return &MockArticleRepositoryInterface_FindArticleById_Call{Call: _e.mock.On("FindArticleById", ctx, articleId)}
}

func (_c *MockArticleRepositoryInterface_FindArticleById_Call) Run(run func(ctx context.Context, articleId uuid.UUID)) *MockArticleRepositoryInterface_FindArticleById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockArticleRepositoryInterface_FindArticleById_Call) Return(_a0 domain.Article, _a1 error) *MockArticleRepositoryInterface_FindArticleById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleRepositoryInterface_FindArticleById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (domain.Article, error)) *MockArticleRepositoryInterface_FindArticleById_Call {
	_c.Call.Return(run)
	return _c
}

// FindArticleBySlug provides a mock function with given fields: ctx, email
func (_m *MockArticleRepositoryInterface) FindArticleBySlug(ctx context.Context, email string) (domain.Article, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindArticleBySlug")
	}

	var r0 domain.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Article, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Article); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(domain.Article)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleRepositoryInterface_FindArticleBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindArticleBySlug'
type MockArticleRepositoryInterface_FindArticleBySlug_Call struct {
	*mock.Call
}

// FindArticleBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockArticleRepositoryInterface_Expecter) FindArticleBySlug(ctx interface{}, email interface{}) *MockArticleRepositoryInterface_FindArticleBySlug_Call {
	return &MockArticleRepositoryInterface_FindArticleBySlug_Call{Call: _e.mock.On("FindArticleBySlug", ctx, email)}
}

func (_c *MockArticleRepositoryInterface_FindArticleBySlug_Call) Run(run func(ctx context.Context, email string)) *MockArticleRepositoryInterface_FindArticleBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockArticleRepositoryInterface_FindArticleBySlug_Call) Return(_a0 domain.Article, _a1 error) *MockArticleRepositoryInterface_FindArticleBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleRepositoryInterface_FindArticleBySlug_Call) RunAndReturn(run func(context.Context, string) (domain.Article, error)) *MockArticleRepositoryInterface_FindArticleBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// FindArticlesByIds provides a mock function with given fields: ctx, articleIds
func (_m *MockArticleRepositoryInterface) FindArticlesByIds(ctx context.Context, articleIds []uuid.UUID) ([]domain.Article, error) {
	ret := _m.Called(ctx, articleIds)

	if len(ret) == 0 {
		panic("no return value specified for FindArticlesByIds")
	}

	var r0 []domain.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]domain.Article, error)); ok {
		return rf(ctx, articleIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []domain.Article); ok {
		r0 = rf(ctx, articleIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, articleIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleRepositoryInterface_FindArticlesByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindArticlesByIds'
type MockArticleRepositoryInterface_FindArticlesByIds_Call struct {
	*mock.Call
}

// FindArticlesByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - articleIds []uuid.UUID
func (_e *MockArticleRepositoryInterface_Expecter) FindArticlesByIds(ctx interface{}, articleIds interface{}) *MockArticleRepositoryInterface_FindArticlesByIds_Call {
	return &MockArticleRepositoryInterface_FindArticlesByIds_Call{Call: _e.mock.On("FindArticlesByIds", ctx, articleIds)}
}

func (_c *MockArticleRepositoryInterface_FindArticlesByIds_Call) Run(run func(ctx context.Context, articleIds []uuid.UUID)) *MockArticleRepositoryInterface_FindArticlesByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockArticleRepositoryInterface_FindArticlesByIds_Call) Return(_a0 []domain.Article, _a1 error) *MockArticleRepositoryInterface_FindArticlesByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleRepositoryInterface_FindArticlesByIds_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]domain.Article, error)) *MockArticleRepositoryInterface_FindArticlesByIds_Call {
	_c.Call.Return(run)
	return _c
}

// FindCommentByCommentIdAndArticleId provides a mock function with given fields: ctx, commentId, articleId
func (_m *MockArticleRepositoryInterface) FindCommentByCommentIdAndArticleId(ctx context.Context, commentId uuid.UUID, articleId uuid.UUID) (domain.Comment, error) {
	ret := _m.Called(ctx, commentId, articleId)

	if len(ret) == 0 {
		panic("no return value specified for FindCommentByCommentIdAndArticleId")
	}

	var r0 domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (domain.Comment, error)); ok {
		return rf(ctx, commentId, articleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) domain.Comment); ok {
		r0 = rf(ctx, commentId, articleId)
	} else {
		r0 = ret.Get(0).(domain.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, commentId, articleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleRepositoryInterface_FindCommentByCommentIdAndArticleId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCommentByCommentIdAndArticleId'
type MockArticleRepositoryInterface_FindCommentByCommentIdAndArticleId_Call struct {
	*mock.Call
}

// FindCommentByCommentIdAndArticleId is a helper method to define mock.On call
//   - ctx context.Context
//   - commentId uuid.UUID
//   - articleId uuid.UUID
func (_e *MockArticleRepositoryInterface_Expecter) FindCommentByCommentIdAndArticleId(ctx interface{}, commentId interface{}, articleId interface{}) *MockArticleRepositoryInterface_FindCommentByCommentIdAndArticleId_Call {
	return &MockArticleRepositoryInterface_FindCommentByCommentIdAndArticleId_Call{Call: _e.mock.On("FindCommentByCommentIdAndArticleId", ctx, commentId, articleId)}
}

func (_c *MockArticleRepositoryInterface_FindCommentByCommentIdAndArticleId_Call) Run(run func(ctx context.Context, commentId uuid.UUID, articleId uuid.UUID)) *MockArticleRepositoryInterface_FindCommentByCommentIdAndArticleId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockArticleRepositoryInterface_FindCommentByCommentIdAndArticleId_Call) Return(_a0 domain.Comment, _a1 error) *MockArticleRepositoryInterface_FindCommentByCommentIdAndArticleId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleRepositoryInterface_FindCommentByCommentIdAndArticleId_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (domain.Comment, error)) *MockArticleRepositoryInterface_FindCommentByCommentIdAndArticleId_Call {
	_c.Call.Return(run)
	return _c
}

// FindCommentsByArticleId provides a mock function with given fields: ctx, articleId
func (_m *MockArticleRepositoryInterface) FindCommentsByArticleId(ctx context.Context, articleId uuid.UUID) ([]domain.Comment, error) {
	ret := _m.Called(ctx, articleId)

	if len(ret) == 0 {
		panic("no return value specified for FindCommentsByArticleId")
	}

	var r0 []domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]domain.Comment, error)); ok {
		return rf(ctx, articleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []domain.Comment); ok {
		r0 = rf(ctx, articleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, articleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleRepositoryInterface_FindCommentsByArticleId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCommentsByArticleId'
type MockArticleRepositoryInterface_FindCommentsByArticleId_Call struct {
	*mock.Call
}

// FindCommentsByArticleId is a helper method to define mock.On call
//   - ctx context.Context
//   - articleId uuid.UUID
func (_e *MockArticleRepositoryInterface_Expecter) FindCommentsByArticleId(ctx interface{}, articleId interface{}) *MockArticleRepositoryInterface_FindCommentsByArticleId_Call {
	return &MockArticleRepositoryInterface_FindCommentsByArticleId_Call{Call: _e.mock.On("FindCommentsByArticleId", ctx, articleId)}
}

func (_c *MockArticleRepositoryInterface_FindCommentsByArticleId_Call) Run(run func(ctx context.Context, articleId uuid.UUID)) *MockArticleRepositoryInterface_FindCommentsByArticleId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockArticleRepositoryInterface_FindCommentsByArticleId_Call) Return(_a0 []domain.Comment, _a1 error) *MockArticleRepositoryInterface_FindCommentsByArticleId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleRepositoryInterface_FindCommentsByArticleId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]domain.Comment, error)) *MockArticleRepositoryInterface_FindCommentsByArticleId_Call {
	_c.Call.Return(run)
	return _c
}

// IsFavorited provides a mock function with given fields: ctx, articleId, userId
func (_m *MockArticleRepositoryInterface) IsFavorited(ctx context.Context, articleId uuid.UUID, userId uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, articleId, userId)

	if len(ret) == 0 {
		panic("no return value specified for IsFavorited")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, articleId, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, articleId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, articleId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleRepositoryInterface_IsFavorited_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFavorited'
type MockArticleRepositoryInterface_IsFavorited_Call struct {
	*mock.Call
}

// IsFavorited is a helper method to define mock.On call
//   - ctx context.Context
//   - articleId uuid.UUID
//   - userId uuid.UUID
func (_e *MockArticleRepositoryInterface_Expecter) IsFavorited(ctx interface{}, articleId interface{}, userId interface{}) *MockArticleRepositoryInterface_IsFavorited_Call {
	return &MockArticleRepositoryInterface_IsFavorited_Call{Call: _e.mock.On("IsFavorited", ctx, articleId, userId)}
}

func (_c *MockArticleRepositoryInterface_IsFavorited_Call) Run(run func(ctx context.Context, articleId uuid.UUID, userId uuid.UUID)) *MockArticleRepositoryInterface_IsFavorited_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockArticleRepositoryInterface_IsFavorited_Call) Return(_a0 bool, _a1 error) *MockArticleRepositoryInterface_IsFavorited_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleRepositoryInterface_IsFavorited_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (bool, error)) *MockArticleRepositoryInterface_IsFavorited_Call {
	_c.Call.Return(run)
	return _c
}

// IsFavoritedBulk provides a mock function with given fields: ctx, userId, articleIds
func (_m *MockArticleRepositoryInterface) IsFavoritedBulk(ctx context.Context, userId uuid.UUID, articleIds []uuid.UUID) (mapset.Set[uuid.UUID], error) {
	ret := _m.Called(ctx, userId, articleIds)

	if len(ret) == 0 {
		panic("no return value specified for IsFavoritedBulk")
	}

	var r0 mapset.Set[uuid.UUID]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) (mapset.Set[uuid.UUID], error)); ok {
		return rf(ctx, userId, articleIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) mapset.Set[uuid.UUID]); ok {
		r0 = rf(ctx, userId, articleIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mapset.Set[uuid.UUID])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []uuid.UUID) error); ok {
		r1 = rf(ctx, userId, articleIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleRepositoryInterface_IsFavoritedBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFavoritedBulk'
type MockArticleRepositoryInterface_IsFavoritedBulk_Call struct {
	*mock.Call
}

// IsFavoritedBulk is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
//   - articleIds []uuid.UUID
func (_e *MockArticleRepositoryInterface_Expecter) IsFavoritedBulk(ctx interface{}, userId interface{}, articleIds interface{}) *MockArticleRepositoryInterface_IsFavoritedBulk_Call {
	return &MockArticleRepositoryInterface_IsFavoritedBulk_Call{Call: _e.mock.On("IsFavoritedBulk", ctx, userId, articleIds)}
}

func (_c *MockArticleRepositoryInterface_IsFavoritedBulk_Call) Run(run func(ctx context.Context, userId uuid.UUID, articleIds []uuid.UUID)) *MockArticleRepositoryInterface_IsFavoritedBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].([]uuid.UUID))
	})
	return _c
}

func (_c *MockArticleRepositoryInterface_IsFavoritedBulk_Call) Return(_a0 mapset.Set[uuid.UUID], _a1 error) *MockArticleRepositoryInterface_IsFavoritedBulk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleRepositoryInterface_IsFavoritedBulk_Call) RunAndReturn(run func(context.Context, uuid.UUID, []uuid.UUID) (mapset.Set[uuid.UUID], error)) *MockArticleRepositoryInterface_IsFavoritedBulk_Call {
	_c.Call.Return(run)
	return _c
}

// UnfavoriteArticle provides a mock function with given fields: ctx, loggedInUserId, articleId
func (_m *MockArticleRepositoryInterface) UnfavoriteArticle(ctx context.Context, loggedInUserId uuid.UUID, articleId uuid.UUID) error {
	ret := _m.Called(ctx, loggedInUserId, articleId)

	if len(ret) == 0 {
		panic("no return value specified for UnfavoriteArticle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, loggedInUserId, articleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockArticleRepositoryInterface_UnfavoriteArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnfavoriteArticle'
type MockArticleRepositoryInterface_UnfavoriteArticle_Call struct {
	*mock.Call
}

// UnfavoriteArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - loggedInUserId uuid.UUID
//   - articleId uuid.UUID
func (_e *MockArticleRepositoryInterface_Expecter) UnfavoriteArticle(ctx interface{}, loggedInUserId interface{}, articleId interface{}) *MockArticleRepositoryInterface_UnfavoriteArticle_Call {
	return &MockArticleRepositoryInterface_UnfavoriteArticle_Call{Call: _e.mock.On("UnfavoriteArticle", ctx, loggedInUserId, articleId)}
}

func (_c *MockArticleRepositoryInterface_UnfavoriteArticle_Call) Run(run func(ctx context.Context, loggedInUserId uuid.UUID, articleId uuid.UUID)) *MockArticleRepositoryInterface_UnfavoriteArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockArticleRepositoryInterface_UnfavoriteArticle_Call) Return(_a0 error) *MockArticleRepositoryInterface_UnfavoriteArticle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArticleRepositoryInterface_UnfavoriteArticle_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockArticleRepositoryInterface_UnfavoriteArticle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockArticleRepositoryInterface creates a new instance of MockArticleRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArticleRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArticleRepositoryInterface {
	mock := &MockArticleRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
