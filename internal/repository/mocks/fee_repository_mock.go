// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/feed_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/feed_repository.go -destination=internal/repository/mocks/fee_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserFeedRepositoryInterface is a mock of UserFeedRepositoryInterface interface.
type MockUserFeedRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserFeedRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockUserFeedRepositoryInterfaceMockRecorder is the mock recorder for MockUserFeedRepositoryInterface.
type MockUserFeedRepositoryInterfaceMockRecorder struct {
	mock *MockUserFeedRepositoryInterface
}

// NewMockUserFeedRepositoryInterface creates a new mock instance.
func NewMockUserFeedRepositoryInterface(ctrl *gomock.Controller) *MockUserFeedRepositoryInterface {
	mock := &MockUserFeedRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserFeedRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFeedRepositoryInterface) EXPECT() *MockUserFeedRepositoryInterfaceMockRecorder {
	return m.recorder
}

// FanoutArticle mocks base method.
func (m *MockUserFeedRepositoryInterface) FanoutArticle(ctx context.Context, articleId, authorId uuid.UUID, createdAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FanoutArticle", ctx, articleId, authorId, createdAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// FanoutArticle indicates an expected call of FanoutArticle.
func (mr *MockUserFeedRepositoryInterfaceMockRecorder) FanoutArticle(ctx, articleId, authorId, createdAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FanoutArticle", reflect.TypeOf((*MockUserFeedRepositoryInterface)(nil).FanoutArticle), ctx, articleId, authorId, createdAt)
}

// FindArticleIdsInUserFeed mocks base method.
func (m *MockUserFeedRepositoryInterface) FindArticleIdsInUserFeed(ctx context.Context, userId uuid.UUID, limit int, nextPageToken *string) ([]uuid.UUID, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindArticleIdsInUserFeed", ctx, userId, limit, nextPageToken)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindArticleIdsInUserFeed indicates an expected call of FindArticleIdsInUserFeed.
func (mr *MockUserFeedRepositoryInterfaceMockRecorder) FindArticleIdsInUserFeed(ctx, userId, limit, nextPageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindArticleIdsInUserFeed", reflect.TypeOf((*MockUserFeedRepositoryInterface)(nil).FindArticleIdsInUserFeed), ctx, userId, limit, nextPageToken)
}
