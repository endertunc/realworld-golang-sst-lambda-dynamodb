// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "realworld-aws-lambda-dynamodb-golang/internal/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockCommentRepositoryInterface is an autogenerated mock type for the CommentRepositoryInterface type
type MockCommentRepositoryInterface struct {
	mock.Mock
}

type MockCommentRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommentRepositoryInterface) EXPECT() *MockCommentRepositoryInterface_Expecter {
	return &MockCommentRepositoryInterface_Expecter{mock: &_m.Mock}
}

// CreateComment provides a mock function with given fields: ctx, comment
func (_m *MockCommentRepositoryInterface) CreateComment(ctx context.Context, comment domain.Comment) error {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Comment) error); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommentRepositoryInterface_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type MockCommentRepositoryInterface_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - ctx context.Context
//   - comment domain.Comment
func (_e *MockCommentRepositoryInterface_Expecter) CreateComment(ctx interface{}, comment interface{}) *MockCommentRepositoryInterface_CreateComment_Call {
	return &MockCommentRepositoryInterface_CreateComment_Call{Call: _e.mock.On("CreateComment", ctx, comment)}
}

func (_c *MockCommentRepositoryInterface_CreateComment_Call) Run(run func(ctx context.Context, comment domain.Comment)) *MockCommentRepositoryInterface_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Comment))
	})
	return _c
}

func (_c *MockCommentRepositoryInterface_CreateComment_Call) Return(_a0 error) *MockCommentRepositoryInterface_CreateComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentRepositoryInterface_CreateComment_Call) RunAndReturn(run func(context.Context, domain.Comment) error) *MockCommentRepositoryInterface_CreateComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCommentByArticleIdAndCommentId provides a mock function with given fields: ctx, articleId, commentId
func (_m *MockCommentRepositoryInterface) DeleteCommentByArticleIdAndCommentId(ctx context.Context, articleId uuid.UUID, commentId uuid.UUID) error {
	ret := _m.Called(ctx, articleId, commentId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCommentByArticleIdAndCommentId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, articleId, commentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommentRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCommentByArticleIdAndCommentId'
type MockCommentRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call struct {
	*mock.Call
}

// DeleteCommentByArticleIdAndCommentId is a helper method to define mock.On call
//   - ctx context.Context
//   - articleId uuid.UUID
//   - commentId uuid.UUID
func (_e *MockCommentRepositoryInterface_Expecter) DeleteCommentByArticleIdAndCommentId(ctx interface{}, articleId interface{}, commentId interface{}) *MockCommentRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call {
	return &MockCommentRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call{Call: _e.mock.On("DeleteCommentByArticleIdAndCommentId", ctx, articleId, commentId)}
}

func (_c *MockCommentRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call) Run(run func(ctx context.Context, articleId uuid.UUID, commentId uuid.UUID)) *MockCommentRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockCommentRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call) Return(_a0 error) *MockCommentRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockCommentRepositoryInterface_DeleteCommentByArticleIdAndCommentId_Call {
	_c.Call.Return(run)
	return _c
}

// FindCommentByCommentIdAndArticleId provides a mock function with given fields: ctx, commentId, articleId
func (_m *MockCommentRepositoryInterface) FindCommentByCommentIdAndArticleId(ctx context.Context, commentId uuid.UUID, articleId uuid.UUID) (domain.Comment, error) {
	ret := _m.Called(ctx, commentId, articleId)

	if len(ret) == 0 {
		panic("no return value specified for FindCommentByCommentIdAndArticleId")
	}

	var r0 domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (domain.Comment, error)); ok {
		return rf(ctx, commentId, articleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) domain.Comment); ok {
		r0 = rf(ctx, commentId, articleId)
	} else {
		r0 = ret.Get(0).(domain.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, commentId, articleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentRepositoryInterface_FindCommentByCommentIdAndArticleId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCommentByCommentIdAndArticleId'
type MockCommentRepositoryInterface_FindCommentByCommentIdAndArticleId_Call struct {
	*mock.Call
}

// FindCommentByCommentIdAndArticleId is a helper method to define mock.On call
//   - ctx context.Context
//   - commentId uuid.UUID
//   - articleId uuid.UUID
func (_e *MockCommentRepositoryInterface_Expecter) FindCommentByCommentIdAndArticleId(ctx interface{}, commentId interface{}, articleId interface{}) *MockCommentRepositoryInterface_FindCommentByCommentIdAndArticleId_Call {
	return &MockCommentRepositoryInterface_FindCommentByCommentIdAndArticleId_Call{Call: _e.mock.On("FindCommentByCommentIdAndArticleId", ctx, commentId, articleId)}
}

func (_c *MockCommentRepositoryInterface_FindCommentByCommentIdAndArticleId_Call) Run(run func(ctx context.Context, commentId uuid.UUID, articleId uuid.UUID)) *MockCommentRepositoryInterface_FindCommentByCommentIdAndArticleId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockCommentRepositoryInterface_FindCommentByCommentIdAndArticleId_Call) Return(_a0 domain.Comment, _a1 error) *MockCommentRepositoryInterface_FindCommentByCommentIdAndArticleId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentRepositoryInterface_FindCommentByCommentIdAndArticleId_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (domain.Comment, error)) *MockCommentRepositoryInterface_FindCommentByCommentIdAndArticleId_Call {
	_c.Call.Return(run)
	return _c
}

// FindCommentsByArticleId provides a mock function with given fields: ctx, articleId
func (_m *MockCommentRepositoryInterface) FindCommentsByArticleId(ctx context.Context, articleId uuid.UUID) ([]domain.Comment, error) {
	ret := _m.Called(ctx, articleId)

	if len(ret) == 0 {
		panic("no return value specified for FindCommentsByArticleId")
	}

	var r0 []domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]domain.Comment, error)); ok {
		return rf(ctx, articleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []domain.Comment); ok {
		r0 = rf(ctx, articleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, articleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentRepositoryInterface_FindCommentsByArticleId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCommentsByArticleId'
type MockCommentRepositoryInterface_FindCommentsByArticleId_Call struct {
	*mock.Call
}

// FindCommentsByArticleId is a helper method to define mock.On call
//   - ctx context.Context
//   - articleId uuid.UUID
func (_e *MockCommentRepositoryInterface_Expecter) FindCommentsByArticleId(ctx interface{}, articleId interface{}) *MockCommentRepositoryInterface_FindCommentsByArticleId_Call {
	return &MockCommentRepositoryInterface_FindCommentsByArticleId_Call{Call: _e.mock.On("FindCommentsByArticleId", ctx, articleId)}
}

func (_c *MockCommentRepositoryInterface_FindCommentsByArticleId_Call) Run(run func(ctx context.Context, articleId uuid.UUID)) *MockCommentRepositoryInterface_FindCommentsByArticleId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockCommentRepositoryInterface_FindCommentsByArticleId_Call) Return(_a0 []domain.Comment, _a1 error) *MockCommentRepositoryInterface_FindCommentsByArticleId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentRepositoryInterface_FindCommentsByArticleId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]domain.Comment, error)) *MockCommentRepositoryInterface_FindCommentsByArticleId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommentRepositoryInterface creates a new instance of MockCommentRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommentRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommentRepositoryInterface {
	mock := &MockCommentRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
