// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mapset "github.com/deckarep/golang-set/v2"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockFollowerRepositoryInterface is an autogenerated mock type for the FollowerRepositoryInterface type
type MockFollowerRepositoryInterface struct {
	mock.Mock
}

type MockFollowerRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFollowerRepositoryInterface) EXPECT() *MockFollowerRepositoryInterface_Expecter {
	return &MockFollowerRepositoryInterface_Expecter{mock: &_m.Mock}
}

// FindFollowees provides a mock function with given fields: ctx, follower, followee
func (_m *MockFollowerRepositoryInterface) FindFollowees(ctx context.Context, follower uuid.UUID, followee []uuid.UUID) (mapset.Set[uuid.UUID], error) {
	ret := _m.Called(ctx, follower, followee)

	if len(ret) == 0 {
		panic("no return value specified for FindFollowees")
	}

	var r0 mapset.Set[uuid.UUID]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) (mapset.Set[uuid.UUID], error)); ok {
		return rf(ctx, follower, followee)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) mapset.Set[uuid.UUID]); ok {
		r0 = rf(ctx, follower, followee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mapset.Set[uuid.UUID])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []uuid.UUID) error); ok {
		r1 = rf(ctx, follower, followee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFollowerRepositoryInterface_FindFollowees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindFollowees'
type MockFollowerRepositoryInterface_FindFollowees_Call struct {
	*mock.Call
}

// FindFollowees is a helper method to define mock.On call
//   - ctx context.Context
//   - follower uuid.UUID
//   - followee []uuid.UUID
func (_e *MockFollowerRepositoryInterface_Expecter) FindFollowees(ctx interface{}, follower interface{}, followee interface{}) *MockFollowerRepositoryInterface_FindFollowees_Call {
	return &MockFollowerRepositoryInterface_FindFollowees_Call{Call: _e.mock.On("FindFollowees", ctx, follower, followee)}
}

func (_c *MockFollowerRepositoryInterface_FindFollowees_Call) Run(run func(ctx context.Context, follower uuid.UUID, followee []uuid.UUID)) *MockFollowerRepositoryInterface_FindFollowees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].([]uuid.UUID))
	})
	return _c
}

func (_c *MockFollowerRepositoryInterface_FindFollowees_Call) Return(_a0 mapset.Set[uuid.UUID], _a1 error) *MockFollowerRepositoryInterface_FindFollowees_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFollowerRepositoryInterface_FindFollowees_Call) RunAndReturn(run func(context.Context, uuid.UUID, []uuid.UUID) (mapset.Set[uuid.UUID], error)) *MockFollowerRepositoryInterface_FindFollowees_Call {
	_c.Call.Return(run)
	return _c
}

// Follow provides a mock function with given fields: ctx, follower, followee
func (_m *MockFollowerRepositoryInterface) Follow(ctx context.Context, follower uuid.UUID, followee uuid.UUID) error {
	ret := _m.Called(ctx, follower, followee)

	if len(ret) == 0 {
		panic("no return value specified for Follow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, follower, followee)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFollowerRepositoryInterface_Follow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Follow'
type MockFollowerRepositoryInterface_Follow_Call struct {
	*mock.Call
}

// Follow is a helper method to define mock.On call
//   - ctx context.Context
//   - follower uuid.UUID
//   - followee uuid.UUID
func (_e *MockFollowerRepositoryInterface_Expecter) Follow(ctx interface{}, follower interface{}, followee interface{}) *MockFollowerRepositoryInterface_Follow_Call {
	return &MockFollowerRepositoryInterface_Follow_Call{Call: _e.mock.On("Follow", ctx, follower, followee)}
}

func (_c *MockFollowerRepositoryInterface_Follow_Call) Run(run func(ctx context.Context, follower uuid.UUID, followee uuid.UUID)) *MockFollowerRepositoryInterface_Follow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockFollowerRepositoryInterface_Follow_Call) Return(_a0 error) *MockFollowerRepositoryInterface_Follow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFollowerRepositoryInterface_Follow_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockFollowerRepositoryInterface_Follow_Call {
	_c.Call.Return(run)
	return _c
}

// UnFollow provides a mock function with given fields: ctx, follower, followee
func (_m *MockFollowerRepositoryInterface) UnFollow(ctx context.Context, follower uuid.UUID, followee uuid.UUID) error {
	ret := _m.Called(ctx, follower, followee)

	if len(ret) == 0 {
		panic("no return value specified for UnFollow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, follower, followee)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFollowerRepositoryInterface_UnFollow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnFollow'
type MockFollowerRepositoryInterface_UnFollow_Call struct {
	*mock.Call
}

// UnFollow is a helper method to define mock.On call
//   - ctx context.Context
//   - follower uuid.UUID
//   - followee uuid.UUID
func (_e *MockFollowerRepositoryInterface_Expecter) UnFollow(ctx interface{}, follower interface{}, followee interface{}) *MockFollowerRepositoryInterface_UnFollow_Call {
	return &MockFollowerRepositoryInterface_UnFollow_Call{Call: _e.mock.On("UnFollow", ctx, follower, followee)}
}

func (_c *MockFollowerRepositoryInterface_UnFollow_Call) Run(run func(ctx context.Context, follower uuid.UUID, followee uuid.UUID)) *MockFollowerRepositoryInterface_UnFollow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockFollowerRepositoryInterface_UnFollow_Call) Return(_a0 error) *MockFollowerRepositoryInterface_UnFollow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFollowerRepositoryInterface_UnFollow_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockFollowerRepositoryInterface_UnFollow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFollowerRepositoryInterface creates a new instance of MockFollowerRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFollowerRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFollowerRepositoryInterface {
	mock := &MockFollowerRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
