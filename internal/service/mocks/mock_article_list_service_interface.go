// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "realworld-aws-lambda-dynamodb-golang/internal/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockArticleListServiceInterface is an autogenerated mock type for the ArticleListServiceInterface type
type MockArticleListServiceInterface struct {
	mock.Mock
}

type MockArticleListServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArticleListServiceInterface) EXPECT() *MockArticleListServiceInterface_Expecter {
	return &MockArticleListServiceInterface_Expecter{mock: &_m.Mock}
}

// GetMostRecentArticlesByAuthor provides a mock function with given fields: ctx, userId, author, limit, nextPageToken
func (_m *MockArticleListServiceInterface) GetMostRecentArticlesByAuthor(ctx context.Context, userId *uuid.UUID, author string, limit int, nextPageToken *string) ([]domain.ArticleAggregateView, *string, error) {
	ret := _m.Called(ctx, userId, author, limit, nextPageToken)

	if len(ret) == 0 {
		panic("no return value specified for GetMostRecentArticlesByAuthor")
	}

	var r0 []domain.ArticleAggregateView
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, string, int, *string) ([]domain.ArticleAggregateView, *string, error)); ok {
		return rf(ctx, userId, author, limit, nextPageToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, string, int, *string) []domain.ArticleAggregateView); ok {
		r0 = rf(ctx, userId, author, limit, nextPageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ArticleAggregateView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID, string, int, *string) *string); ok {
		r1 = rf(ctx, userId, author, limit, nextPageToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *uuid.UUID, string, int, *string) error); ok {
		r2 = rf(ctx, userId, author, limit, nextPageToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockArticleListServiceInterface_GetMostRecentArticlesByAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMostRecentArticlesByAuthor'
type MockArticleListServiceInterface_GetMostRecentArticlesByAuthor_Call struct {
	*mock.Call
}

// GetMostRecentArticlesByAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - userId *uuid.UUID
//   - author string
//   - limit int
//   - nextPageToken *string
func (_e *MockArticleListServiceInterface_Expecter) GetMostRecentArticlesByAuthor(ctx interface{}, userId interface{}, author interface{}, limit interface{}, nextPageToken interface{}) *MockArticleListServiceInterface_GetMostRecentArticlesByAuthor_Call {
	return &MockArticleListServiceInterface_GetMostRecentArticlesByAuthor_Call{Call: _e.mock.On("GetMostRecentArticlesByAuthor", ctx, userId, author, limit, nextPageToken)}
}

func (_c *MockArticleListServiceInterface_GetMostRecentArticlesByAuthor_Call) Run(run func(ctx context.Context, userId *uuid.UUID, author string, limit int, nextPageToken *string)) *MockArticleListServiceInterface_GetMostRecentArticlesByAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID), args[2].(string), args[3].(int), args[4].(*string))
	})
	return _c
}

func (_c *MockArticleListServiceInterface_GetMostRecentArticlesByAuthor_Call) Return(_a0 []domain.ArticleAggregateView, _a1 *string, _a2 error) *MockArticleListServiceInterface_GetMostRecentArticlesByAuthor_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockArticleListServiceInterface_GetMostRecentArticlesByAuthor_Call) RunAndReturn(run func(context.Context, *uuid.UUID, string, int, *string) ([]domain.ArticleAggregateView, *string, error)) *MockArticleListServiceInterface_GetMostRecentArticlesByAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// GetMostRecentArticlesFavoritedByTag provides a mock function with given fields: ctx, loggedInUser, tag, limit, nextPageToken
func (_m *MockArticleListServiceInterface) GetMostRecentArticlesFavoritedByTag(ctx context.Context, loggedInUser *uuid.UUID, tag string, limit int, nextPageToken *int) ([]domain.ArticleAggregateView, *int, error) {
	ret := _m.Called(ctx, loggedInUser, tag, limit, nextPageToken)

	if len(ret) == 0 {
		panic("no return value specified for GetMostRecentArticlesFavoritedByTag")
	}

	var r0 []domain.ArticleAggregateView
	var r1 *int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, string, int, *int) ([]domain.ArticleAggregateView, *int, error)); ok {
		return rf(ctx, loggedInUser, tag, limit, nextPageToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, string, int, *int) []domain.ArticleAggregateView); ok {
		r0 = rf(ctx, loggedInUser, tag, limit, nextPageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ArticleAggregateView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID, string, int, *int) *int); ok {
		r1 = rf(ctx, loggedInUser, tag, limit, nextPageToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*int)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *uuid.UUID, string, int, *int) error); ok {
		r2 = rf(ctx, loggedInUser, tag, limit, nextPageToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMostRecentArticlesFavoritedByTag'
type MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByTag_Call struct {
	*mock.Call
}

// GetMostRecentArticlesFavoritedByTag is a helper method to define mock.On call
//   - ctx context.Context
//   - loggedInUser *uuid.UUID
//   - tag string
//   - limit int
//   - nextPageToken *int
func (_e *MockArticleListServiceInterface_Expecter) GetMostRecentArticlesFavoritedByTag(ctx interface{}, loggedInUser interface{}, tag interface{}, limit interface{}, nextPageToken interface{}) *MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByTag_Call {
	return &MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByTag_Call{Call: _e.mock.On("GetMostRecentArticlesFavoritedByTag", ctx, loggedInUser, tag, limit, nextPageToken)}
}

func (_c *MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByTag_Call) Run(run func(ctx context.Context, loggedInUser *uuid.UUID, tag string, limit int, nextPageToken *int)) *MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID), args[2].(string), args[3].(int), args[4].(*int))
	})
	return _c
}

func (_c *MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByTag_Call) Return(_a0 []domain.ArticleAggregateView, _a1 *int, _a2 error) *MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByTag_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByTag_Call) RunAndReturn(run func(context.Context, *uuid.UUID, string, int, *int) ([]domain.ArticleAggregateView, *int, error)) *MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetMostRecentArticlesFavoritedByUser provides a mock function with given fields: ctx, loggedInUser, favoritedByUsername, limit, nextPageToken
func (_m *MockArticleListServiceInterface) GetMostRecentArticlesFavoritedByUser(ctx context.Context, loggedInUser *uuid.UUID, favoritedByUsername string, limit int, nextPageToken *string) ([]domain.ArticleAggregateView, *string, error) {
	ret := _m.Called(ctx, loggedInUser, favoritedByUsername, limit, nextPageToken)

	if len(ret) == 0 {
		panic("no return value specified for GetMostRecentArticlesFavoritedByUser")
	}

	var r0 []domain.ArticleAggregateView
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, string, int, *string) ([]domain.ArticleAggregateView, *string, error)); ok {
		return rf(ctx, loggedInUser, favoritedByUsername, limit, nextPageToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, string, int, *string) []domain.ArticleAggregateView); ok {
		r0 = rf(ctx, loggedInUser, favoritedByUsername, limit, nextPageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ArticleAggregateView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID, string, int, *string) *string); ok {
		r1 = rf(ctx, loggedInUser, favoritedByUsername, limit, nextPageToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *uuid.UUID, string, int, *string) error); ok {
		r2 = rf(ctx, loggedInUser, favoritedByUsername, limit, nextPageToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMostRecentArticlesFavoritedByUser'
type MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByUser_Call struct {
	*mock.Call
}

// GetMostRecentArticlesFavoritedByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - loggedInUser *uuid.UUID
//   - favoritedByUsername string
//   - limit int
//   - nextPageToken *string
func (_e *MockArticleListServiceInterface_Expecter) GetMostRecentArticlesFavoritedByUser(ctx interface{}, loggedInUser interface{}, favoritedByUsername interface{}, limit interface{}, nextPageToken interface{}) *MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByUser_Call {
	return &MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByUser_Call{Call: _e.mock.On("GetMostRecentArticlesFavoritedByUser", ctx, loggedInUser, favoritedByUsername, limit, nextPageToken)}
}

func (_c *MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByUser_Call) Run(run func(ctx context.Context, loggedInUser *uuid.UUID, favoritedByUsername string, limit int, nextPageToken *string)) *MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID), args[2].(string), args[3].(int), args[4].(*string))
	})
	return _c
}

func (_c *MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByUser_Call) Return(_a0 []domain.ArticleAggregateView, _a1 *string, _a2 error) *MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByUser_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByUser_Call) RunAndReturn(run func(context.Context, *uuid.UUID, string, int, *string) ([]domain.ArticleAggregateView, *string, error)) *MockArticleListServiceInterface_GetMostRecentArticlesFavoritedByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetMostRecentArticlesGlobally provides a mock function with given fields: ctx, loggedInUser, limit, nextPageToken
func (_m *MockArticleListServiceInterface) GetMostRecentArticlesGlobally(ctx context.Context, loggedInUser *uuid.UUID, limit int, nextPageToken *int) ([]domain.ArticleAggregateView, *int, error) {
	ret := _m.Called(ctx, loggedInUser, limit, nextPageToken)

	if len(ret) == 0 {
		panic("no return value specified for GetMostRecentArticlesGlobally")
	}

	var r0 []domain.ArticleAggregateView
	var r1 *int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, int, *int) ([]domain.ArticleAggregateView, *int, error)); ok {
		return rf(ctx, loggedInUser, limit, nextPageToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, int, *int) []domain.ArticleAggregateView); ok {
		r0 = rf(ctx, loggedInUser, limit, nextPageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ArticleAggregateView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID, int, *int) *int); ok {
		r1 = rf(ctx, loggedInUser, limit, nextPageToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*int)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *uuid.UUID, int, *int) error); ok {
		r2 = rf(ctx, loggedInUser, limit, nextPageToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockArticleListServiceInterface_GetMostRecentArticlesGlobally_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMostRecentArticlesGlobally'
type MockArticleListServiceInterface_GetMostRecentArticlesGlobally_Call struct {
	*mock.Call
}

// GetMostRecentArticlesGlobally is a helper method to define mock.On call
//   - ctx context.Context
//   - loggedInUser *uuid.UUID
//   - limit int
//   - nextPageToken *int
func (_e *MockArticleListServiceInterface_Expecter) GetMostRecentArticlesGlobally(ctx interface{}, loggedInUser interface{}, limit interface{}, nextPageToken interface{}) *MockArticleListServiceInterface_GetMostRecentArticlesGlobally_Call {
	return &MockArticleListServiceInterface_GetMostRecentArticlesGlobally_Call{Call: _e.mock.On("GetMostRecentArticlesGlobally", ctx, loggedInUser, limit, nextPageToken)}
}

func (_c *MockArticleListServiceInterface_GetMostRecentArticlesGlobally_Call) Run(run func(ctx context.Context, loggedInUser *uuid.UUID, limit int, nextPageToken *int)) *MockArticleListServiceInterface_GetMostRecentArticlesGlobally_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID), args[2].(int), args[3].(*int))
	})
	return _c
}

func (_c *MockArticleListServiceInterface_GetMostRecentArticlesGlobally_Call) Return(_a0 []domain.ArticleAggregateView, _a1 *int, _a2 error) *MockArticleListServiceInterface_GetMostRecentArticlesGlobally_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockArticleListServiceInterface_GetMostRecentArticlesGlobally_Call) RunAndReturn(run func(context.Context, *uuid.UUID, int, *int) ([]domain.ArticleAggregateView, *int, error)) *MockArticleListServiceInterface_GetMostRecentArticlesGlobally_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockArticleListServiceInterface creates a new instance of MockArticleListServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArticleListServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArticleListServiceInterface {
	mock := &MockArticleListServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
