// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/user_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/user_service.go -destination=internal/service/mocks/user_service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "realworld-aws-lambda-dynamodb-golang/internal/domain"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// GetCurrentUser mocks base method.
func (m *MockUserServiceInterface) GetCurrentUser(ctx context.Context, userID uuid.UUID) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser", ctx, userID)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUser indicates an expected call of GetCurrentUser.
func (mr *MockUserServiceInterfaceMockRecorder) GetCurrentUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MockUserServiceInterface)(nil).GetCurrentUser), ctx, userID)
}

// GetUserByUserId mocks base method.
func (m *MockUserServiceInterface) GetUserByUserId(ctx context.Context, userID uuid.UUID) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserId", ctx, userID)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserId indicates an expected call of GetUserByUserId.
func (mr *MockUserServiceInterfaceMockRecorder) GetUserByUserId(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserId", reflect.TypeOf((*MockUserServiceInterface)(nil).GetUserByUserId), ctx, userID)
}

// GetUserByUsername mocks base method.
func (m *MockUserServiceInterface) GetUserByUsername(ctx context.Context, email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserServiceInterfaceMockRecorder) GetUserByUsername(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserServiceInterface)(nil).GetUserByUsername), ctx, email)
}

// GetUserListByUserIDs mocks base method.
func (m *MockUserServiceInterface) GetUserListByUserIDs(ctx context.Context, userIds []uuid.UUID) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserListByUserIDs", ctx, userIds)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserListByUserIDs indicates an expected call of GetUserListByUserIDs.
func (mr *MockUserServiceInterfaceMockRecorder) GetUserListByUserIDs(ctx, userIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserListByUserIDs", reflect.TypeOf((*MockUserServiceInterface)(nil).GetUserListByUserIDs), ctx, userIds)
}

// LoginUser mocks base method.
func (m *MockUserServiceInterface) LoginUser(ctx context.Context, email, plainTextPassword string) (*domain.Token, *domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, email, plainTextPassword)
	ret0, _ := ret[0].(*domain.Token)
	ret1, _ := ret[1].(*domain.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserServiceInterfaceMockRecorder) LoginUser(ctx, email, plainTextPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserServiceInterface)(nil).LoginUser), ctx, email, plainTextPassword)
}

// RegisterUser mocks base method.
func (m *MockUserServiceInterface) RegisterUser(ctx context.Context, email, username, plainTextPassword string) (*domain.Token, *domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, email, username, plainTextPassword)
	ret0, _ := ret[0].(*domain.Token)
	ret1, _ := ret[1].(*domain.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserServiceInterfaceMockRecorder) RegisterUser(ctx, email, username, plainTextPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserServiceInterface)(nil).RegisterUser), ctx, email, username, plainTextPassword)
}
