// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/article_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/article_service.go -destination=internal/service/mocks/article_service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "realworld-aws-lambda-dynamodb-golang/internal/domain"
	reflect "reflect"

	mapset "github.com/deckarep/golang-set/v2"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockArticleServiceInterface is a mock of ArticleServiceInterface interface.
type MockArticleServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockArticleServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockArticleServiceInterfaceMockRecorder is the mock recorder for MockArticleServiceInterface.
type MockArticleServiceInterfaceMockRecorder struct {
	mock *MockArticleServiceInterface
}

// NewMockArticleServiceInterface creates a new mock instance.
func NewMockArticleServiceInterface(ctrl *gomock.Controller) *MockArticleServiceInterface {
	mock := &MockArticleServiceInterface{ctrl: ctrl}
	mock.recorder = &MockArticleServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleServiceInterface) EXPECT() *MockArticleServiceInterfaceMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockArticleServiceInterface) AddComment(c context.Context, loggedInUserId uuid.UUID, articleSlug, body string) (domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", c, loggedInUserId, articleSlug, body)
	ret0, _ := ret[0].(domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockArticleServiceInterfaceMockRecorder) AddComment(c, loggedInUserId, articleSlug, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockArticleServiceInterface)(nil).AddComment), c, loggedInUserId, articleSlug, body)
}

// CreateArticle mocks base method.
func (m *MockArticleServiceInterface) CreateArticle(c context.Context, author uuid.UUID, title, description, body string, tagList []string) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", c, author, title, description, body, tagList)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockArticleServiceInterfaceMockRecorder) CreateArticle(c, author, title, description, body, tagList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockArticleServiceInterface)(nil).CreateArticle), c, author, title, description, body, tagList)
}

// DeleteArticle mocks base method.
func (m *MockArticleServiceInterface) DeleteArticle(c context.Context, author uuid.UUID, slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", c, author, slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockArticleServiceInterfaceMockRecorder) DeleteArticle(c, author, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockArticleServiceInterface)(nil).DeleteArticle), c, author, slug)
}

// DeleteComment mocks base method.
func (m *MockArticleServiceInterface) DeleteComment(c context.Context, author uuid.UUID, slug string, commentId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", c, author, slug, commentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockArticleServiceInterfaceMockRecorder) DeleteComment(c, author, slug, commentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockArticleServiceInterface)(nil).DeleteComment), c, author, slug, commentId)
}

// FavoriteArticle mocks base method.
func (m *MockArticleServiceInterface) FavoriteArticle(c context.Context, userId uuid.UUID, slug string) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FavoriteArticle", c, userId, slug)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavoriteArticle indicates an expected call of FavoriteArticle.
func (mr *MockArticleServiceInterfaceMockRecorder) FavoriteArticle(c, userId, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavoriteArticle", reflect.TypeOf((*MockArticleServiceInterface)(nil).FavoriteArticle), c, userId, slug)
}

// FindArticlesByIds mocks base method.
func (m *MockArticleServiceInterface) FindArticlesByIds(c context.Context, articleIds []uuid.UUID) ([]domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindArticlesByIds", c, articleIds)
	ret0, _ := ret[0].([]domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindArticlesByIds indicates an expected call of FindArticlesByIds.
func (mr *MockArticleServiceInterfaceMockRecorder) FindArticlesByIds(c, articleIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindArticlesByIds", reflect.TypeOf((*MockArticleServiceInterface)(nil).FindArticlesByIds), c, articleIds)
}

// GetArticle mocks base method.
func (m *MockArticleServiceInterface) GetArticle(c context.Context, slug string) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", c, slug)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticle indicates an expected call of GetArticle.
func (mr *MockArticleServiceInterfaceMockRecorder) GetArticle(c, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockArticleServiceInterface)(nil).GetArticle), c, slug)
}

// GetArticleComments mocks base method.
func (m *MockArticleServiceInterface) GetArticleComments(c context.Context, slug string) ([]domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleComments", c, slug)
	ret0, _ := ret[0].([]domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleComments indicates an expected call of GetArticleComments.
func (mr *MockArticleServiceInterfaceMockRecorder) GetArticleComments(c, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleComments", reflect.TypeOf((*MockArticleServiceInterface)(nil).GetArticleComments), c, slug)
}

// IsFavorited mocks base method.
func (m *MockArticleServiceInterface) IsFavorited(c context.Context, articleId, userId uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFavorited", c, articleId, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFavorited indicates an expected call of IsFavorited.
func (mr *MockArticleServiceInterfaceMockRecorder) IsFavorited(c, articleId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavorited", reflect.TypeOf((*MockArticleServiceInterface)(nil).IsFavorited), c, articleId, userId)
}

// IsFavoritedBulk mocks base method.
func (m *MockArticleServiceInterface) IsFavoritedBulk(c context.Context, userId uuid.UUID, articleIds []uuid.UUID) (mapset.Set[uuid.UUID], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFavoritedBulk", c, userId, articleIds)
	ret0, _ := ret[0].(mapset.Set[uuid.UUID])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFavoritedBulk indicates an expected call of IsFavoritedBulk.
func (mr *MockArticleServiceInterfaceMockRecorder) IsFavoritedBulk(c, userId, articleIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavoritedBulk", reflect.TypeOf((*MockArticleServiceInterface)(nil).IsFavoritedBulk), c, userId, articleIds)
}

// UnfavoriteArticle mocks base method.
func (m *MockArticleServiceInterface) UnfavoriteArticle(c context.Context, userId uuid.UUID, slug string) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfavoriteArticle", c, userId, slug)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnfavoriteArticle indicates an expected call of UnfavoriteArticle.
func (mr *MockArticleServiceInterfaceMockRecorder) UnfavoriteArticle(c, userId, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfavoriteArticle", reflect.TypeOf((*MockArticleServiceInterface)(nil).UnfavoriteArticle), c, userId, slug)
}
