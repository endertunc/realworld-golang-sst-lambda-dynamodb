// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "realworld-aws-lambda-dynamodb-golang/internal/domain"

	mapset "github.com/deckarep/golang-set/v2"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockArticleServiceInterface is an autogenerated mock type for the ArticleServiceInterface type
type MockArticleServiceInterface struct {
	mock.Mock
}

type MockArticleServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArticleServiceInterface) EXPECT() *MockArticleServiceInterface_Expecter {
	return &MockArticleServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateArticle provides a mock function with given fields: ctx, author, title, description, body, tagList
func (_m *MockArticleServiceInterface) CreateArticle(ctx context.Context, author uuid.UUID, title string, description string, body string, tagList []string) (domain.Article, error) {
	ret := _m.Called(ctx, author, title, description, body, tagList)

	if len(ret) == 0 {
		panic("no return value specified for CreateArticle")
	}

	var r0 domain.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, string, []string) (domain.Article, error)); ok {
		return rf(ctx, author, title, description, body, tagList)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, string, []string) domain.Article); ok {
		r0 = rf(ctx, author, title, description, body, tagList)
	} else {
		r0 = ret.Get(0).(domain.Article)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, string, []string) error); ok {
		r1 = rf(ctx, author, title, description, body, tagList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleServiceInterface_CreateArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateArticle'
type MockArticleServiceInterface_CreateArticle_Call struct {
	*mock.Call
}

// CreateArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - author uuid.UUID
//   - title string
//   - description string
//   - body string
//   - tagList []string
func (_e *MockArticleServiceInterface_Expecter) CreateArticle(ctx interface{}, author interface{}, title interface{}, description interface{}, body interface{}, tagList interface{}) *MockArticleServiceInterface_CreateArticle_Call {
	return &MockArticleServiceInterface_CreateArticle_Call{Call: _e.mock.On("CreateArticle", ctx, author, title, description, body, tagList)}
}

func (_c *MockArticleServiceInterface_CreateArticle_Call) Run(run func(ctx context.Context, author uuid.UUID, title string, description string, body string, tagList []string)) *MockArticleServiceInterface_CreateArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string), args[4].(string), args[5].([]string))
	})
	return _c
}

func (_c *MockArticleServiceInterface_CreateArticle_Call) Return(_a0 domain.Article, _a1 error) *MockArticleServiceInterface_CreateArticle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleServiceInterface_CreateArticle_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string, string, []string) (domain.Article, error)) *MockArticleServiceInterface_CreateArticle_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteArticle provides a mock function with given fields: ctx, author, slug
func (_m *MockArticleServiceInterface) DeleteArticle(ctx context.Context, author uuid.UUID, slug string) error {
	ret := _m.Called(ctx, author, slug)

	if len(ret) == 0 {
		panic("no return value specified for DeleteArticle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, author, slug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockArticleServiceInterface_DeleteArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteArticle'
type MockArticleServiceInterface_DeleteArticle_Call struct {
	*mock.Call
}

// DeleteArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - author uuid.UUID
//   - slug string
func (_e *MockArticleServiceInterface_Expecter) DeleteArticle(ctx interface{}, author interface{}, slug interface{}) *MockArticleServiceInterface_DeleteArticle_Call {
	return &MockArticleServiceInterface_DeleteArticle_Call{Call: _e.mock.On("DeleteArticle", ctx, author, slug)}
}

func (_c *MockArticleServiceInterface_DeleteArticle_Call) Run(run func(ctx context.Context, author uuid.UUID, slug string)) *MockArticleServiceInterface_DeleteArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockArticleServiceInterface_DeleteArticle_Call) Return(_a0 error) *MockArticleServiceInterface_DeleteArticle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArticleServiceInterface_DeleteArticle_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) error) *MockArticleServiceInterface_DeleteArticle_Call {
	_c.Call.Return(run)
	return _c
}

// FavoriteArticle provides a mock function with given fields: ctx, userId, slug
func (_m *MockArticleServiceInterface) FavoriteArticle(ctx context.Context, userId uuid.UUID, slug string) (domain.Article, error) {
	ret := _m.Called(ctx, userId, slug)

	if len(ret) == 0 {
		panic("no return value specified for FavoriteArticle")
	}

	var r0 domain.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (domain.Article, error)); ok {
		return rf(ctx, userId, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) domain.Article); ok {
		r0 = rf(ctx, userId, slug)
	} else {
		r0 = ret.Get(0).(domain.Article)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, userId, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleServiceInterface_FavoriteArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FavoriteArticle'
type MockArticleServiceInterface_FavoriteArticle_Call struct {
	*mock.Call
}

// FavoriteArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
//   - slug string
func (_e *MockArticleServiceInterface_Expecter) FavoriteArticle(ctx interface{}, userId interface{}, slug interface{}) *MockArticleServiceInterface_FavoriteArticle_Call {
	return &MockArticleServiceInterface_FavoriteArticle_Call{Call: _e.mock.On("FavoriteArticle", ctx, userId, slug)}
}

func (_c *MockArticleServiceInterface_FavoriteArticle_Call) Run(run func(ctx context.Context, userId uuid.UUID, slug string)) *MockArticleServiceInterface_FavoriteArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockArticleServiceInterface_FavoriteArticle_Call) Return(_a0 domain.Article, _a1 error) *MockArticleServiceInterface_FavoriteArticle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleServiceInterface_FavoriteArticle_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (domain.Article, error)) *MockArticleServiceInterface_FavoriteArticle_Call {
	_c.Call.Return(run)
	return _c
}

// GetArticle provides a mock function with given fields: ctx, slug
func (_m *MockArticleServiceInterface) GetArticle(ctx context.Context, slug string) (domain.Article, error) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetArticle")
	}

	var r0 domain.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Article, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Article); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Get(0).(domain.Article)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleServiceInterface_GetArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArticle'
type MockArticleServiceInterface_GetArticle_Call struct {
	*mock.Call
}

// GetArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *MockArticleServiceInterface_Expecter) GetArticle(ctx interface{}, slug interface{}) *MockArticleServiceInterface_GetArticle_Call {
	return &MockArticleServiceInterface_GetArticle_Call{Call: _e.mock.On("GetArticle", ctx, slug)}
}

func (_c *MockArticleServiceInterface_GetArticle_Call) Run(run func(ctx context.Context, slug string)) *MockArticleServiceInterface_GetArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockArticleServiceInterface_GetArticle_Call) Return(_a0 domain.Article, _a1 error) *MockArticleServiceInterface_GetArticle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleServiceInterface_GetArticle_Call) RunAndReturn(run func(context.Context, string) (domain.Article, error)) *MockArticleServiceInterface_GetArticle_Call {
	_c.Call.Return(run)
	return _c
}

// GetArticleBySlug provides a mock function with given fields: ctx, slug
func (_m *MockArticleServiceInterface) GetArticleBySlug(ctx context.Context, slug string) (domain.Article, error) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetArticleBySlug")
	}

	var r0 domain.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Article, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Article); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Get(0).(domain.Article)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleServiceInterface_GetArticleBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArticleBySlug'
type MockArticleServiceInterface_GetArticleBySlug_Call struct {
	*mock.Call
}

// GetArticleBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *MockArticleServiceInterface_Expecter) GetArticleBySlug(ctx interface{}, slug interface{}) *MockArticleServiceInterface_GetArticleBySlug_Call {
	return &MockArticleServiceInterface_GetArticleBySlug_Call{Call: _e.mock.On("GetArticleBySlug", ctx, slug)}
}

func (_c *MockArticleServiceInterface_GetArticleBySlug_Call) Run(run func(ctx context.Context, slug string)) *MockArticleServiceInterface_GetArticleBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockArticleServiceInterface_GetArticleBySlug_Call) Return(_a0 domain.Article, _a1 error) *MockArticleServiceInterface_GetArticleBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleServiceInterface_GetArticleBySlug_Call) RunAndReturn(run func(context.Context, string) (domain.Article, error)) *MockArticleServiceInterface_GetArticleBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// GetArticlesByIds provides a mock function with given fields: ctx, articleIds
func (_m *MockArticleServiceInterface) GetArticlesByIds(ctx context.Context, articleIds []uuid.UUID) ([]domain.Article, error) {
	ret := _m.Called(ctx, articleIds)

	if len(ret) == 0 {
		panic("no return value specified for GetArticlesByIds")
	}

	var r0 []domain.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]domain.Article, error)); ok {
		return rf(ctx, articleIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []domain.Article); ok {
		r0 = rf(ctx, articleIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, articleIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleServiceInterface_GetArticlesByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArticlesByIds'
type MockArticleServiceInterface_GetArticlesByIds_Call struct {
	*mock.Call
}

// GetArticlesByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - articleIds []uuid.UUID
func (_e *MockArticleServiceInterface_Expecter) GetArticlesByIds(ctx interface{}, articleIds interface{}) *MockArticleServiceInterface_GetArticlesByIds_Call {
	return &MockArticleServiceInterface_GetArticlesByIds_Call{Call: _e.mock.On("GetArticlesByIds", ctx, articleIds)}
}

func (_c *MockArticleServiceInterface_GetArticlesByIds_Call) Run(run func(ctx context.Context, articleIds []uuid.UUID)) *MockArticleServiceInterface_GetArticlesByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockArticleServiceInterface_GetArticlesByIds_Call) Return(_a0 []domain.Article, _a1 error) *MockArticleServiceInterface_GetArticlesByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleServiceInterface_GetArticlesByIds_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]domain.Article, error)) *MockArticleServiceInterface_GetArticlesByIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetMostRecentArticlesByAuthor provides a mock function with given fields: ctx, userId, author, limit, nextPageToken
func (_m *MockArticleServiceInterface) GetMostRecentArticlesByAuthor(ctx context.Context, userId *uuid.UUID, author string, limit int, nextPageToken *string) ([]domain.FeedItem, *string, error) {
	ret := _m.Called(ctx, userId, author, limit, nextPageToken)

	if len(ret) == 0 {
		panic("no return value specified for GetMostRecentArticlesByAuthor")
	}

	var r0 []domain.FeedItem
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, string, int, *string) ([]domain.FeedItem, *string, error)); ok {
		return rf(ctx, userId, author, limit, nextPageToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, string, int, *string) []domain.FeedItem); ok {
		r0 = rf(ctx, userId, author, limit, nextPageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeedItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID, string, int, *string) *string); ok {
		r1 = rf(ctx, userId, author, limit, nextPageToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *uuid.UUID, string, int, *string) error); ok {
		r2 = rf(ctx, userId, author, limit, nextPageToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockArticleServiceInterface_GetMostRecentArticlesByAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMostRecentArticlesByAuthor'
type MockArticleServiceInterface_GetMostRecentArticlesByAuthor_Call struct {
	*mock.Call
}

// GetMostRecentArticlesByAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - userId *uuid.UUID
//   - author string
//   - limit int
//   - nextPageToken *string
func (_e *MockArticleServiceInterface_Expecter) GetMostRecentArticlesByAuthor(ctx interface{}, userId interface{}, author interface{}, limit interface{}, nextPageToken interface{}) *MockArticleServiceInterface_GetMostRecentArticlesByAuthor_Call {
	return &MockArticleServiceInterface_GetMostRecentArticlesByAuthor_Call{Call: _e.mock.On("GetMostRecentArticlesByAuthor", ctx, userId, author, limit, nextPageToken)}
}

func (_c *MockArticleServiceInterface_GetMostRecentArticlesByAuthor_Call) Run(run func(ctx context.Context, userId *uuid.UUID, author string, limit int, nextPageToken *string)) *MockArticleServiceInterface_GetMostRecentArticlesByAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID), args[2].(string), args[3].(int), args[4].(*string))
	})
	return _c
}

func (_c *MockArticleServiceInterface_GetMostRecentArticlesByAuthor_Call) Return(_a0 []domain.FeedItem, _a1 *string, _a2 error) *MockArticleServiceInterface_GetMostRecentArticlesByAuthor_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockArticleServiceInterface_GetMostRecentArticlesByAuthor_Call) RunAndReturn(run func(context.Context, *uuid.UUID, string, int, *string) ([]domain.FeedItem, *string, error)) *MockArticleServiceInterface_GetMostRecentArticlesByAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// GetMostRecentArticlesFavoritedByTag provides a mock function with given fields: ctx, loggedInUser, tag, limit, nextPageToken
func (_m *MockArticleServiceInterface) GetMostRecentArticlesFavoritedByTag(ctx context.Context, loggedInUser *uuid.UUID, tag string, limit int, nextPageToken *string) ([]domain.FeedItem, *string, error) {
	ret := _m.Called(ctx, loggedInUser, tag, limit, nextPageToken)

	if len(ret) == 0 {
		panic("no return value specified for GetMostRecentArticlesFavoritedByTag")
	}

	var r0 []domain.FeedItem
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, string, int, *string) ([]domain.FeedItem, *string, error)); ok {
		return rf(ctx, loggedInUser, tag, limit, nextPageToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, string, int, *string) []domain.FeedItem); ok {
		r0 = rf(ctx, loggedInUser, tag, limit, nextPageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeedItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID, string, int, *string) *string); ok {
		r1 = rf(ctx, loggedInUser, tag, limit, nextPageToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *uuid.UUID, string, int, *string) error); ok {
		r2 = rf(ctx, loggedInUser, tag, limit, nextPageToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockArticleServiceInterface_GetMostRecentArticlesFavoritedByTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMostRecentArticlesFavoritedByTag'
type MockArticleServiceInterface_GetMostRecentArticlesFavoritedByTag_Call struct {
	*mock.Call
}

// GetMostRecentArticlesFavoritedByTag is a helper method to define mock.On call
//   - ctx context.Context
//   - loggedInUser *uuid.UUID
//   - tag string
//   - limit int
//   - nextPageToken *string
func (_e *MockArticleServiceInterface_Expecter) GetMostRecentArticlesFavoritedByTag(ctx interface{}, loggedInUser interface{}, tag interface{}, limit interface{}, nextPageToken interface{}) *MockArticleServiceInterface_GetMostRecentArticlesFavoritedByTag_Call {
	return &MockArticleServiceInterface_GetMostRecentArticlesFavoritedByTag_Call{Call: _e.mock.On("GetMostRecentArticlesFavoritedByTag", ctx, loggedInUser, tag, limit, nextPageToken)}
}

func (_c *MockArticleServiceInterface_GetMostRecentArticlesFavoritedByTag_Call) Run(run func(ctx context.Context, loggedInUser *uuid.UUID, tag string, limit int, nextPageToken *string)) *MockArticleServiceInterface_GetMostRecentArticlesFavoritedByTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID), args[2].(string), args[3].(int), args[4].(*string))
	})
	return _c
}

func (_c *MockArticleServiceInterface_GetMostRecentArticlesFavoritedByTag_Call) Return(_a0 []domain.FeedItem, _a1 *string, _a2 error) *MockArticleServiceInterface_GetMostRecentArticlesFavoritedByTag_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockArticleServiceInterface_GetMostRecentArticlesFavoritedByTag_Call) RunAndReturn(run func(context.Context, *uuid.UUID, string, int, *string) ([]domain.FeedItem, *string, error)) *MockArticleServiceInterface_GetMostRecentArticlesFavoritedByTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetMostRecentArticlesFavoritedByUser provides a mock function with given fields: ctx, loggedInUser, favoritedByUsername, limit, nextPageToken
func (_m *MockArticleServiceInterface) GetMostRecentArticlesFavoritedByUser(ctx context.Context, loggedInUser *uuid.UUID, favoritedByUsername string, limit int, nextPageToken *string) ([]domain.FeedItem, *string, error) {
	ret := _m.Called(ctx, loggedInUser, favoritedByUsername, limit, nextPageToken)

	if len(ret) == 0 {
		panic("no return value specified for GetMostRecentArticlesFavoritedByUser")
	}

	var r0 []domain.FeedItem
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, string, int, *string) ([]domain.FeedItem, *string, error)); ok {
		return rf(ctx, loggedInUser, favoritedByUsername, limit, nextPageToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, string, int, *string) []domain.FeedItem); ok {
		r0 = rf(ctx, loggedInUser, favoritedByUsername, limit, nextPageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeedItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID, string, int, *string) *string); ok {
		r1 = rf(ctx, loggedInUser, favoritedByUsername, limit, nextPageToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *uuid.UUID, string, int, *string) error); ok {
		r2 = rf(ctx, loggedInUser, favoritedByUsername, limit, nextPageToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockArticleServiceInterface_GetMostRecentArticlesFavoritedByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMostRecentArticlesFavoritedByUser'
type MockArticleServiceInterface_GetMostRecentArticlesFavoritedByUser_Call struct {
	*mock.Call
}

// GetMostRecentArticlesFavoritedByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - loggedInUser *uuid.UUID
//   - favoritedByUsername string
//   - limit int
//   - nextPageToken *string
func (_e *MockArticleServiceInterface_Expecter) GetMostRecentArticlesFavoritedByUser(ctx interface{}, loggedInUser interface{}, favoritedByUsername interface{}, limit interface{}, nextPageToken interface{}) *MockArticleServiceInterface_GetMostRecentArticlesFavoritedByUser_Call {
	return &MockArticleServiceInterface_GetMostRecentArticlesFavoritedByUser_Call{Call: _e.mock.On("GetMostRecentArticlesFavoritedByUser", ctx, loggedInUser, favoritedByUsername, limit, nextPageToken)}
}

func (_c *MockArticleServiceInterface_GetMostRecentArticlesFavoritedByUser_Call) Run(run func(ctx context.Context, loggedInUser *uuid.UUID, favoritedByUsername string, limit int, nextPageToken *string)) *MockArticleServiceInterface_GetMostRecentArticlesFavoritedByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID), args[2].(string), args[3].(int), args[4].(*string))
	})
	return _c
}

func (_c *MockArticleServiceInterface_GetMostRecentArticlesFavoritedByUser_Call) Return(_a0 []domain.FeedItem, _a1 *string, _a2 error) *MockArticleServiceInterface_GetMostRecentArticlesFavoritedByUser_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockArticleServiceInterface_GetMostRecentArticlesFavoritedByUser_Call) RunAndReturn(run func(context.Context, *uuid.UUID, string, int, *string) ([]domain.FeedItem, *string, error)) *MockArticleServiceInterface_GetMostRecentArticlesFavoritedByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetMostRecentArticlesGlobally provides a mock function with given fields: ctx, loggedInUser, limit, nextPageToken
func (_m *MockArticleServiceInterface) GetMostRecentArticlesGlobally(ctx context.Context, loggedInUser *uuid.UUID, limit int, nextPageToken *string) ([]domain.FeedItem, *string, error) {
	ret := _m.Called(ctx, loggedInUser, limit, nextPageToken)

	if len(ret) == 0 {
		panic("no return value specified for GetMostRecentArticlesGlobally")
	}

	var r0 []domain.FeedItem
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, int, *string) ([]domain.FeedItem, *string, error)); ok {
		return rf(ctx, loggedInUser, limit, nextPageToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, int, *string) []domain.FeedItem); ok {
		r0 = rf(ctx, loggedInUser, limit, nextPageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FeedItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID, int, *string) *string); ok {
		r1 = rf(ctx, loggedInUser, limit, nextPageToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *uuid.UUID, int, *string) error); ok {
		r2 = rf(ctx, loggedInUser, limit, nextPageToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockArticleServiceInterface_GetMostRecentArticlesGlobally_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMostRecentArticlesGlobally'
type MockArticleServiceInterface_GetMostRecentArticlesGlobally_Call struct {
	*mock.Call
}

// GetMostRecentArticlesGlobally is a helper method to define mock.On call
//   - ctx context.Context
//   - loggedInUser *uuid.UUID
//   - limit int
//   - nextPageToken *string
func (_e *MockArticleServiceInterface_Expecter) GetMostRecentArticlesGlobally(ctx interface{}, loggedInUser interface{}, limit interface{}, nextPageToken interface{}) *MockArticleServiceInterface_GetMostRecentArticlesGlobally_Call {
	return &MockArticleServiceInterface_GetMostRecentArticlesGlobally_Call{Call: _e.mock.On("GetMostRecentArticlesGlobally", ctx, loggedInUser, limit, nextPageToken)}
}

func (_c *MockArticleServiceInterface_GetMostRecentArticlesGlobally_Call) Run(run func(ctx context.Context, loggedInUser *uuid.UUID, limit int, nextPageToken *string)) *MockArticleServiceInterface_GetMostRecentArticlesGlobally_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID), args[2].(int), args[3].(*string))
	})
	return _c
}

func (_c *MockArticleServiceInterface_GetMostRecentArticlesGlobally_Call) Return(_a0 []domain.FeedItem, _a1 *string, _a2 error) *MockArticleServiceInterface_GetMostRecentArticlesGlobally_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockArticleServiceInterface_GetMostRecentArticlesGlobally_Call) RunAndReturn(run func(context.Context, *uuid.UUID, int, *string) ([]domain.FeedItem, *string, error)) *MockArticleServiceInterface_GetMostRecentArticlesGlobally_Call {
	_c.Call.Return(run)
	return _c
}

// IsFavorited provides a mock function with given fields: ctx, articleId, userId
func (_m *MockArticleServiceInterface) IsFavorited(ctx context.Context, articleId uuid.UUID, userId uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, articleId, userId)

	if len(ret) == 0 {
		panic("no return value specified for IsFavorited")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, articleId, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, articleId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, articleId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleServiceInterface_IsFavorited_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFavorited'
type MockArticleServiceInterface_IsFavorited_Call struct {
	*mock.Call
}

// IsFavorited is a helper method to define mock.On call
//   - ctx context.Context
//   - articleId uuid.UUID
//   - userId uuid.UUID
func (_e *MockArticleServiceInterface_Expecter) IsFavorited(ctx interface{}, articleId interface{}, userId interface{}) *MockArticleServiceInterface_IsFavorited_Call {
	return &MockArticleServiceInterface_IsFavorited_Call{Call: _e.mock.On("IsFavorited", ctx, articleId, userId)}
}

func (_c *MockArticleServiceInterface_IsFavorited_Call) Run(run func(ctx context.Context, articleId uuid.UUID, userId uuid.UUID)) *MockArticleServiceInterface_IsFavorited_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockArticleServiceInterface_IsFavorited_Call) Return(_a0 bool, _a1 error) *MockArticleServiceInterface_IsFavorited_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleServiceInterface_IsFavorited_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (bool, error)) *MockArticleServiceInterface_IsFavorited_Call {
	_c.Call.Return(run)
	return _c
}

// IsFavoritedBulk provides a mock function with given fields: ctx, userId, articleIds
func (_m *MockArticleServiceInterface) IsFavoritedBulk(ctx context.Context, userId uuid.UUID, articleIds []uuid.UUID) (mapset.Set[uuid.UUID], error) {
	ret := _m.Called(ctx, userId, articleIds)

	if len(ret) == 0 {
		panic("no return value specified for IsFavoritedBulk")
	}

	var r0 mapset.Set[uuid.UUID]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) (mapset.Set[uuid.UUID], error)); ok {
		return rf(ctx, userId, articleIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) mapset.Set[uuid.UUID]); ok {
		r0 = rf(ctx, userId, articleIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mapset.Set[uuid.UUID])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []uuid.UUID) error); ok {
		r1 = rf(ctx, userId, articleIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleServiceInterface_IsFavoritedBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFavoritedBulk'
type MockArticleServiceInterface_IsFavoritedBulk_Call struct {
	*mock.Call
}

// IsFavoritedBulk is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
//   - articleIds []uuid.UUID
func (_e *MockArticleServiceInterface_Expecter) IsFavoritedBulk(ctx interface{}, userId interface{}, articleIds interface{}) *MockArticleServiceInterface_IsFavoritedBulk_Call {
	return &MockArticleServiceInterface_IsFavoritedBulk_Call{Call: _e.mock.On("IsFavoritedBulk", ctx, userId, articleIds)}
}

func (_c *MockArticleServiceInterface_IsFavoritedBulk_Call) Run(run func(ctx context.Context, userId uuid.UUID, articleIds []uuid.UUID)) *MockArticleServiceInterface_IsFavoritedBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].([]uuid.UUID))
	})
	return _c
}

func (_c *MockArticleServiceInterface_IsFavoritedBulk_Call) Return(_a0 mapset.Set[uuid.UUID], _a1 error) *MockArticleServiceInterface_IsFavoritedBulk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleServiceInterface_IsFavoritedBulk_Call) RunAndReturn(run func(context.Context, uuid.UUID, []uuid.UUID) (mapset.Set[uuid.UUID], error)) *MockArticleServiceInterface_IsFavoritedBulk_Call {
	_c.Call.Return(run)
	return _c
}

// UnfavoriteArticle provides a mock function with given fields: ctx, userId, slug
func (_m *MockArticleServiceInterface) UnfavoriteArticle(ctx context.Context, userId uuid.UUID, slug string) (domain.Article, error) {
	ret := _m.Called(ctx, userId, slug)

	if len(ret) == 0 {
		panic("no return value specified for UnfavoriteArticle")
	}

	var r0 domain.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (domain.Article, error)); ok {
		return rf(ctx, userId, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) domain.Article); ok {
		r0 = rf(ctx, userId, slug)
	} else {
		r0 = ret.Get(0).(domain.Article)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, userId, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleServiceInterface_UnfavoriteArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnfavoriteArticle'
type MockArticleServiceInterface_UnfavoriteArticle_Call struct {
	*mock.Call
}

// UnfavoriteArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
//   - slug string
func (_e *MockArticleServiceInterface_Expecter) UnfavoriteArticle(ctx interface{}, userId interface{}, slug interface{}) *MockArticleServiceInterface_UnfavoriteArticle_Call {
	return &MockArticleServiceInterface_UnfavoriteArticle_Call{Call: _e.mock.On("UnfavoriteArticle", ctx, userId, slug)}
}

func (_c *MockArticleServiceInterface_UnfavoriteArticle_Call) Run(run func(ctx context.Context, userId uuid.UUID, slug string)) *MockArticleServiceInterface_UnfavoriteArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockArticleServiceInterface_UnfavoriteArticle_Call) Return(_a0 domain.Article, _a1 error) *MockArticleServiceInterface_UnfavoriteArticle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleServiceInterface_UnfavoriteArticle_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (domain.Article, error)) *MockArticleServiceInterface_UnfavoriteArticle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockArticleServiceInterface creates a new instance of MockArticleServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArticleServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArticleServiceInterface {
	mock := &MockArticleServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
