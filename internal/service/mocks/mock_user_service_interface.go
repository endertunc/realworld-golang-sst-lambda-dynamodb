// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "realworld-aws-lambda-dynamodb-golang/internal/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockUserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type MockUserServiceInterface struct {
	mock.Mock
}

type MockUserServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserServiceInterface) EXPECT() *MockUserServiceInterface_Expecter {
	return &MockUserServiceInterface_Expecter{mock: &_m.Mock}
}

// GetUserByUserId provides a mock function with given fields: ctx, userID
func (_m *MockUserServiceInterface) GetUserByUserId(ctx context.Context, userID uuid.UUID) (domain.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUserId")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (domain.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceInterface_GetUserByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUserId'
type MockUserServiceInterface_GetUserByUserId_Call struct {
	*mock.Call
}

// GetUserByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockUserServiceInterface_Expecter) GetUserByUserId(ctx interface{}, userID interface{}) *MockUserServiceInterface_GetUserByUserId_Call {
	return &MockUserServiceInterface_GetUserByUserId_Call{Call: _e.mock.On("GetUserByUserId", ctx, userID)}
}

func (_c *MockUserServiceInterface_GetUserByUserId_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockUserServiceInterface_GetUserByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserServiceInterface_GetUserByUserId_Call) Return(_a0 domain.User, _a1 error) *MockUserServiceInterface_GetUserByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceInterface_GetUserByUserId_Call) RunAndReturn(run func(context.Context, uuid.UUID) (domain.User, error)) *MockUserServiceInterface_GetUserByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *MockUserServiceInterface) GetUserByUsername(ctx context.Context, username string) (domain.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceInterface_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockUserServiceInterface_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserServiceInterface_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *MockUserServiceInterface_GetUserByUsername_Call {
	return &MockUserServiceInterface_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *MockUserServiceInterface_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockUserServiceInterface_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserServiceInterface_GetUserByUsername_Call) Return(_a0 domain.User, _a1 error) *MockUserServiceInterface_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceInterface_GetUserByUsername_Call) RunAndReturn(run func(context.Context, string) (domain.User, error)) *MockUserServiceInterface_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserListByUserIDs provides a mock function with given fields: ctx, userIds
func (_m *MockUserServiceInterface) GetUserListByUserIDs(ctx context.Context, userIds []uuid.UUID) ([]domain.User, error) {
	ret := _m.Called(ctx, userIds)

	if len(ret) == 0 {
		panic("no return value specified for GetUserListByUserIDs")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]domain.User, error)); ok {
		return rf(ctx, userIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []domain.User); ok {
		r0 = rf(ctx, userIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, userIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceInterface_GetUserListByUserIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserListByUserIDs'
type MockUserServiceInterface_GetUserListByUserIDs_Call struct {
	*mock.Call
}

// GetUserListByUserIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - userIds []uuid.UUID
func (_e *MockUserServiceInterface_Expecter) GetUserListByUserIDs(ctx interface{}, userIds interface{}) *MockUserServiceInterface_GetUserListByUserIDs_Call {
	return &MockUserServiceInterface_GetUserListByUserIDs_Call{Call: _e.mock.On("GetUserListByUserIDs", ctx, userIds)}
}

func (_c *MockUserServiceInterface_GetUserListByUserIDs_Call) Run(run func(ctx context.Context, userIds []uuid.UUID)) *MockUserServiceInterface_GetUserListByUserIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockUserServiceInterface_GetUserListByUserIDs_Call) Return(_a0 []domain.User, _a1 error) *MockUserServiceInterface_GetUserListByUserIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceInterface_GetUserListByUserIDs_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]domain.User, error)) *MockUserServiceInterface_GetUserListByUserIDs_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function with given fields: ctx, email, plainTextPassword
func (_m *MockUserServiceInterface) LoginUser(ctx context.Context, email string, plainTextPassword string) (*domain.Token, *domain.User, error) {
	ret := _m.Called(ctx, email, plainTextPassword)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 *domain.Token
	var r1 *domain.User
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Token, *domain.User, error)); ok {
		return rf(ctx, email, plainTextPassword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Token); ok {
		r0 = rf(ctx, email, plainTextPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *domain.User); ok {
		r1 = rf(ctx, email, plainTextPassword)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.User)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, email, plainTextPassword)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserServiceInterface_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type MockUserServiceInterface_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - plainTextPassword string
func (_e *MockUserServiceInterface_Expecter) LoginUser(ctx interface{}, email interface{}, plainTextPassword interface{}) *MockUserServiceInterface_LoginUser_Call {
	return &MockUserServiceInterface_LoginUser_Call{Call: _e.mock.On("LoginUser", ctx, email, plainTextPassword)}
}

func (_c *MockUserServiceInterface_LoginUser_Call) Run(run func(ctx context.Context, email string, plainTextPassword string)) *MockUserServiceInterface_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserServiceInterface_LoginUser_Call) Return(_a0 *domain.Token, _a1 *domain.User, _a2 error) *MockUserServiceInterface_LoginUser_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserServiceInterface_LoginUser_Call) RunAndReturn(run func(context.Context, string, string) (*domain.Token, *domain.User, error)) *MockUserServiceInterface_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, email, username, plainTextPassword
func (_m *MockUserServiceInterface) RegisterUser(ctx context.Context, email string, username string, plainTextPassword string) (*domain.Token, *domain.User, error) {
	ret := _m.Called(ctx, email, username, plainTextPassword)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *domain.Token
	var r1 *domain.User
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*domain.Token, *domain.User, error)); ok {
		return rf(ctx, email, username, plainTextPassword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *domain.Token); ok {
		r0 = rf(ctx, email, username, plainTextPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *domain.User); ok {
		r1 = rf(ctx, email, username, plainTextPassword)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.User)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, email, username, plainTextPassword)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserServiceInterface_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type MockUserServiceInterface_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - username string
//   - plainTextPassword string
func (_e *MockUserServiceInterface_Expecter) RegisterUser(ctx interface{}, email interface{}, username interface{}, plainTextPassword interface{}) *MockUserServiceInterface_RegisterUser_Call {
	return &MockUserServiceInterface_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, email, username, plainTextPassword)}
}

func (_c *MockUserServiceInterface_RegisterUser_Call) Run(run func(ctx context.Context, email string, username string, plainTextPassword string)) *MockUserServiceInterface_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUserServiceInterface_RegisterUser_Call) Return(_a0 *domain.Token, _a1 *domain.User, _a2 error) *MockUserServiceInterface_RegisterUser_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserServiceInterface_RegisterUser_Call) RunAndReturn(run func(context.Context, string, string, string) (*domain.Token, *domain.User, error)) *MockUserServiceInterface_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserServiceInterface creates a new instance of MockUserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
