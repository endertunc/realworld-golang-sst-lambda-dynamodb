// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/feed_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/feed_service.go -destination=internal/service/mocks/feed_service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "realworld-aws-lambda-dynamodb-golang/internal/domain"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockFeedServiceInterface is a mock of FeedServiceInterface interface.
type MockFeedServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFeedServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockFeedServiceInterfaceMockRecorder is the mock recorder for MockFeedServiceInterface.
type MockFeedServiceInterfaceMockRecorder struct {
	mock *MockFeedServiceInterface
}

// NewMockFeedServiceInterface creates a new mock instance.
func NewMockFeedServiceInterface(ctrl *gomock.Controller) *MockFeedServiceInterface {
	mock := &MockFeedServiceInterface{ctrl: ctrl}
	mock.recorder = &MockFeedServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedServiceInterface) EXPECT() *MockFeedServiceInterfaceMockRecorder {
	return m.recorder
}

// FanoutArticle mocks base method.
func (m *MockFeedServiceInterface) FanoutArticle(ctx context.Context, articleId, authorId uuid.UUID, createdAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FanoutArticle", ctx, articleId, authorId, createdAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// FanoutArticle indicates an expected call of FanoutArticle.
func (mr *MockFeedServiceInterfaceMockRecorder) FanoutArticle(ctx, articleId, authorId, createdAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FanoutArticle", reflect.TypeOf((*MockFeedServiceInterface)(nil).FanoutArticle), ctx, articleId, authorId, createdAt)
}

// FetchArticlesFromFeed mocks base method.
func (m *MockFeedServiceInterface) FetchArticlesFromFeed(ctx context.Context, userId uuid.UUID, limit int, nextPageToken *string) ([]domain.FeedItem, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchArticlesFromFeed", ctx, userId, limit, nextPageToken)
	ret0, _ := ret[0].([]domain.FeedItem)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchArticlesFromFeed indicates an expected call of FetchArticlesFromFeed.
func (mr *MockFeedServiceInterfaceMockRecorder) FetchArticlesFromFeed(ctx, userId, limit, nextPageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchArticlesFromFeed", reflect.TypeOf((*MockFeedServiceInterface)(nil).FetchArticlesFromFeed), ctx, userId, limit, nextPageToken)
}
