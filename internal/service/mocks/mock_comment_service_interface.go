// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "realworld-aws-lambda-dynamodb-golang/internal/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockCommentServiceInterface is an autogenerated mock type for the CommentServiceInterface type
type MockCommentServiceInterface struct {
	mock.Mock
}

type MockCommentServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommentServiceInterface) EXPECT() *MockCommentServiceInterface_Expecter {
	return &MockCommentServiceInterface_Expecter{mock: &_m.Mock}
}

// AddComment provides a mock function with given fields: ctx, loggedInUserId, articleSlug, body
func (_m *MockCommentServiceInterface) AddComment(ctx context.Context, loggedInUserId uuid.UUID, articleSlug string, body string) (domain.Comment, error) {
	ret := _m.Called(ctx, loggedInUserId, articleSlug, body)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) (domain.Comment, error)); ok {
		return rf(ctx, loggedInUserId, articleSlug, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) domain.Comment); ok {
		r0 = rf(ctx, loggedInUserId, articleSlug, body)
	} else {
		r0 = ret.Get(0).(domain.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string) error); ok {
		r1 = rf(ctx, loggedInUserId, articleSlug, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentServiceInterface_AddComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddComment'
type MockCommentServiceInterface_AddComment_Call struct {
	*mock.Call
}

// AddComment is a helper method to define mock.On call
//   - ctx context.Context
//   - loggedInUserId uuid.UUID
//   - articleSlug string
//   - body string
func (_e *MockCommentServiceInterface_Expecter) AddComment(ctx interface{}, loggedInUserId interface{}, articleSlug interface{}, body interface{}) *MockCommentServiceInterface_AddComment_Call {
	return &MockCommentServiceInterface_AddComment_Call{Call: _e.mock.On("AddComment", ctx, loggedInUserId, articleSlug, body)}
}

func (_c *MockCommentServiceInterface_AddComment_Call) Run(run func(ctx context.Context, loggedInUserId uuid.UUID, articleSlug string, body string)) *MockCommentServiceInterface_AddComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockCommentServiceInterface_AddComment_Call) Return(_a0 domain.Comment, _a1 error) *MockCommentServiceInterface_AddComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentServiceInterface_AddComment_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string) (domain.Comment, error)) *MockCommentServiceInterface_AddComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComment provides a mock function with given fields: ctx, author, slug, commentId
func (_m *MockCommentServiceInterface) DeleteComment(ctx context.Context, author uuid.UUID, slug string, commentId uuid.UUID) error {
	ret := _m.Called(ctx, author, slug, commentId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, uuid.UUID) error); ok {
		r0 = rf(ctx, author, slug, commentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommentServiceInterface_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type MockCommentServiceInterface_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - ctx context.Context
//   - author uuid.UUID
//   - slug string
//   - commentId uuid.UUID
func (_e *MockCommentServiceInterface_Expecter) DeleteComment(ctx interface{}, author interface{}, slug interface{}, commentId interface{}) *MockCommentServiceInterface_DeleteComment_Call {
	return &MockCommentServiceInterface_DeleteComment_Call{Call: _e.mock.On("DeleteComment", ctx, author, slug, commentId)}
}

func (_c *MockCommentServiceInterface_DeleteComment_Call) Run(run func(ctx context.Context, author uuid.UUID, slug string, commentId uuid.UUID)) *MockCommentServiceInterface_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockCommentServiceInterface_DeleteComment_Call) Return(_a0 error) *MockCommentServiceInterface_DeleteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentServiceInterface_DeleteComment_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, uuid.UUID) error) *MockCommentServiceInterface_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetArticleComments provides a mock function with given fields: ctx, slug
func (_m *MockCommentServiceInterface) GetArticleComments(ctx context.Context, slug string) ([]domain.Comment, error) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetArticleComments")
	}

	var r0 []domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.Comment, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Comment); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentServiceInterface_GetArticleComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArticleComments'
type MockCommentServiceInterface_GetArticleComments_Call struct {
	*mock.Call
}

// GetArticleComments is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *MockCommentServiceInterface_Expecter) GetArticleComments(ctx interface{}, slug interface{}) *MockCommentServiceInterface_GetArticleComments_Call {
	return &MockCommentServiceInterface_GetArticleComments_Call{Call: _e.mock.On("GetArticleComments", ctx, slug)}
}

func (_c *MockCommentServiceInterface_GetArticleComments_Call) Run(run func(ctx context.Context, slug string)) *MockCommentServiceInterface_GetArticleComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCommentServiceInterface_GetArticleComments_Call) Return(_a0 []domain.Comment, _a1 error) *MockCommentServiceInterface_GetArticleComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentServiceInterface_GetArticleComments_Call) RunAndReturn(run func(context.Context, string) ([]domain.Comment, error)) *MockCommentServiceInterface_GetArticleComments_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommentServiceInterface creates a new instance of MockCommentServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommentServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommentServiceInterface {
	mock := &MockCommentServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
