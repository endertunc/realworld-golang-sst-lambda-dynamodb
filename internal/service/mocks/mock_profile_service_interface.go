// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "realworld-aws-lambda-dynamodb-golang/internal/domain"

	mapset "github.com/deckarep/golang-set/v2"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockProfileServiceInterface is an autogenerated mock type for the ProfileServiceInterface type
type MockProfileServiceInterface struct {
	mock.Mock
}

type MockProfileServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProfileServiceInterface) EXPECT() *MockProfileServiceInterface_Expecter {
	return &MockProfileServiceInterface_Expecter{mock: &_m.Mock}
}

// Follow provides a mock function with given fields: c, follower, followeeUsername
func (_m *MockProfileServiceInterface) Follow(c context.Context, follower uuid.UUID, followeeUsername string) (domain.User, error) {
	ret := _m.Called(c, follower, followeeUsername)

	if len(ret) == 0 {
		panic("no return value specified for Follow")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (domain.User, error)); ok {
		return rf(c, follower, followeeUsername)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) domain.User); ok {
		r0 = rf(c, follower, followeeUsername)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(c, follower, followeeUsername)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfileServiceInterface_Follow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Follow'
type MockProfileServiceInterface_Follow_Call struct {
	*mock.Call
}

// Follow is a helper method to define mock.On call
//   - c context.Context
//   - follower uuid.UUID
//   - followeeUsername string
func (_e *MockProfileServiceInterface_Expecter) Follow(c interface{}, follower interface{}, followeeUsername interface{}) *MockProfileServiceInterface_Follow_Call {
	return &MockProfileServiceInterface_Follow_Call{Call: _e.mock.On("Follow", c, follower, followeeUsername)}
}

func (_c *MockProfileServiceInterface_Follow_Call) Run(run func(c context.Context, follower uuid.UUID, followeeUsername string)) *MockProfileServiceInterface_Follow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockProfileServiceInterface_Follow_Call) Return(_a0 domain.User, _a1 error) *MockProfileServiceInterface_Follow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfileServiceInterface_Follow_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (domain.User, error)) *MockProfileServiceInterface_Follow_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserProfile provides a mock function with given fields: c, loggedInUserId, username
func (_m *MockProfileServiceInterface) GetUserProfile(c context.Context, loggedInUserId *uuid.UUID, username string) (domain.User, bool, error) {
	ret := _m.Called(c, loggedInUserId, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProfile")
	}

	var r0 domain.User
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, string) (domain.User, bool, error)); ok {
		return rf(c, loggedInUserId, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, string) domain.User); ok {
		r0 = rf(c, loggedInUserId, username)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID, string) bool); ok {
		r1 = rf(c, loggedInUserId, username)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *uuid.UUID, string) error); ok {
		r2 = rf(c, loggedInUserId, username)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProfileServiceInterface_GetUserProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserProfile'
type MockProfileServiceInterface_GetUserProfile_Call struct {
	*mock.Call
}

// GetUserProfile is a helper method to define mock.On call
//   - c context.Context
//   - loggedInUserId *uuid.UUID
//   - username string
func (_e *MockProfileServiceInterface_Expecter) GetUserProfile(c interface{}, loggedInUserId interface{}, username interface{}) *MockProfileServiceInterface_GetUserProfile_Call {
	return &MockProfileServiceInterface_GetUserProfile_Call{Call: _e.mock.On("GetUserProfile", c, loggedInUserId, username)}
}

func (_c *MockProfileServiceInterface_GetUserProfile_Call) Run(run func(c context.Context, loggedInUserId *uuid.UUID, username string)) *MockProfileServiceInterface_GetUserProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockProfileServiceInterface_GetUserProfile_Call) Return(_a0 domain.User, _a1 bool, _a2 error) *MockProfileServiceInterface_GetUserProfile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProfileServiceInterface_GetUserProfile_Call) RunAndReturn(run func(context.Context, *uuid.UUID, string) (domain.User, bool, error)) *MockProfileServiceInterface_GetUserProfile_Call {
	_c.Call.Return(run)
	return _c
}

// IsFollowing provides a mock function with given fields: c, follower, followee
func (_m *MockProfileServiceInterface) IsFollowing(c context.Context, follower uuid.UUID, followee uuid.UUID) (bool, error) {
	ret := _m.Called(c, follower, followee)

	if len(ret) == 0 {
		panic("no return value specified for IsFollowing")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(c, follower, followee)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(c, follower, followee)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(c, follower, followee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfileServiceInterface_IsFollowing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFollowing'
type MockProfileServiceInterface_IsFollowing_Call struct {
	*mock.Call
}

// IsFollowing is a helper method to define mock.On call
//   - c context.Context
//   - follower uuid.UUID
//   - followee uuid.UUID
func (_e *MockProfileServiceInterface_Expecter) IsFollowing(c interface{}, follower interface{}, followee interface{}) *MockProfileServiceInterface_IsFollowing_Call {
	return &MockProfileServiceInterface_IsFollowing_Call{Call: _e.mock.On("IsFollowing", c, follower, followee)}
}

func (_c *MockProfileServiceInterface_IsFollowing_Call) Run(run func(c context.Context, follower uuid.UUID, followee uuid.UUID)) *MockProfileServiceInterface_IsFollowing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockProfileServiceInterface_IsFollowing_Call) Return(_a0 bool, _a1 error) *MockProfileServiceInterface_IsFollowing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfileServiceInterface_IsFollowing_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (bool, error)) *MockProfileServiceInterface_IsFollowing_Call {
	_c.Call.Return(run)
	return _c
}

// IsFollowingBulk provides a mock function with given fields: ctx, follower, followee
func (_m *MockProfileServiceInterface) IsFollowingBulk(ctx context.Context, follower uuid.UUID, followee []uuid.UUID) (mapset.Set[uuid.UUID], error) {
	ret := _m.Called(ctx, follower, followee)

	if len(ret) == 0 {
		panic("no return value specified for IsFollowingBulk")
	}

	var r0 mapset.Set[uuid.UUID]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) (mapset.Set[uuid.UUID], error)); ok {
		return rf(ctx, follower, followee)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) mapset.Set[uuid.UUID]); ok {
		r0 = rf(ctx, follower, followee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mapset.Set[uuid.UUID])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []uuid.UUID) error); ok {
		r1 = rf(ctx, follower, followee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfileServiceInterface_IsFollowingBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFollowingBulk'
type MockProfileServiceInterface_IsFollowingBulk_Call struct {
	*mock.Call
}

// IsFollowingBulk is a helper method to define mock.On call
//   - ctx context.Context
//   - follower uuid.UUID
//   - followee []uuid.UUID
func (_e *MockProfileServiceInterface_Expecter) IsFollowingBulk(ctx interface{}, follower interface{}, followee interface{}) *MockProfileServiceInterface_IsFollowingBulk_Call {
	return &MockProfileServiceInterface_IsFollowingBulk_Call{Call: _e.mock.On("IsFollowingBulk", ctx, follower, followee)}
}

func (_c *MockProfileServiceInterface_IsFollowingBulk_Call) Run(run func(ctx context.Context, follower uuid.UUID, followee []uuid.UUID)) *MockProfileServiceInterface_IsFollowingBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].([]uuid.UUID))
	})
	return _c
}

func (_c *MockProfileServiceInterface_IsFollowingBulk_Call) Return(_a0 mapset.Set[uuid.UUID], _a1 error) *MockProfileServiceInterface_IsFollowingBulk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfileServiceInterface_IsFollowingBulk_Call) RunAndReturn(run func(context.Context, uuid.UUID, []uuid.UUID) (mapset.Set[uuid.UUID], error)) *MockProfileServiceInterface_IsFollowingBulk_Call {
	_c.Call.Return(run)
	return _c
}

// UnFollow provides a mock function with given fields: c, follower, followeeUsername
func (_m *MockProfileServiceInterface) UnFollow(c context.Context, follower uuid.UUID, followeeUsername string) (domain.User, error) {
	ret := _m.Called(c, follower, followeeUsername)

	if len(ret) == 0 {
		panic("no return value specified for UnFollow")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (domain.User, error)); ok {
		return rf(c, follower, followeeUsername)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) domain.User); ok {
		r0 = rf(c, follower, followeeUsername)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(c, follower, followeeUsername)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfileServiceInterface_UnFollow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnFollow'
type MockProfileServiceInterface_UnFollow_Call struct {
	*mock.Call
}

// UnFollow is a helper method to define mock.On call
//   - c context.Context
//   - follower uuid.UUID
//   - followeeUsername string
func (_e *MockProfileServiceInterface_Expecter) UnFollow(c interface{}, follower interface{}, followeeUsername interface{}) *MockProfileServiceInterface_UnFollow_Call {
	return &MockProfileServiceInterface_UnFollow_Call{Call: _e.mock.On("UnFollow", c, follower, followeeUsername)}
}

func (_c *MockProfileServiceInterface_UnFollow_Call) Run(run func(c context.Context, follower uuid.UUID, followeeUsername string)) *MockProfileServiceInterface_UnFollow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockProfileServiceInterface_UnFollow_Call) Return(_a0 domain.User, _a1 error) *MockProfileServiceInterface_UnFollow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfileServiceInterface_UnFollow_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (domain.User, error)) *MockProfileServiceInterface_UnFollow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProfileServiceInterface creates a new instance of MockProfileServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProfileServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProfileServiceInterface {
	mock := &MockProfileServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
